{"primaryContentSections":[{"kind":"content","content":[{"anchor":"다운샘플링으로-메모리-효율적인-이미지-처리하기","level":2,"type":"heading","text":"다운샘플링으로 메모리 효율적인 이미지 처리하기"},{"type":"paragraph","inlineContent":[{"type":"text","text":"이전 게시물에서 알아보았던 "},{"type":"codeVoice","code":"PHPicker"},{"type":"text","text":"를 사용해서 이미지를 처리하던 중 아래와 같은 에러를 마주쳤습니다."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"https:\/\/i.imgur.com\/PIZF0mw.png"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift가 허용한 4,194,304 바이트보다 큰 데이터를 UserDefaults에 저장할 수 없다는 에러입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"UserDefaults는 작은 데이터들을 저장할 목적으로 만들어진 것이기 때문에 위와 같은 에러는 자연스러운 현상인 듯 합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"지금 저장하려는 이미지는 원본 이미지 그 자체였으니 당연히 용량이 컸을 것이고, 이미지의 용량을 줄이려면 보통 이미지 크기를 줄이겠다는 생각부터 하겠죠?"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"이미지 크기의 축소"}]},{"type":"text","text":"는 가장 직관적으로 이미지 용량을 줄이고 메모리 가용률도 높이는 좋은 방법 중 하나입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"그래서 저도 이미지를 줄일 수 있는 방법부터 찾아보게 되었죠."}]},{"anchor":"이미지-리사이즈시의-CPU와-메모리-동작","level":2,"type":"heading","text":"이미지 리사이즈시의 CPU와 메모리 동작"},{"type":"paragraph","inlineContent":[{"type":"text","text":"하지만 공부를 한 지 얼마 지나지 않아 단순히 이미지를 줄이는 방법은 좋은 방법이 아니고, 오히려 앱이 기기에 과부하를 더 줄 수 있다는 사실을 깨달았습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"그 까닭은 2018년에 진행된 WWDC2018에서 찾아볼 수 있었습니다."}]},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/wwdc18\/219"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이미 이미지 처리 게시물들에서 많이 다루고 있고 iOS의 화면 표현 방법을 학습해볼 수 있는 세션입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"아래는 "},{"type":"codeVoice","code":"UIGraphicsImageRenderer"},{"type":"text","text":"를 사용하여 "},{"type":"codeVoice","code":"PHPicker"},{"type":"text","text":"를 통해 받은 이미지 여러개의 크기를 줄이는 코드입니다."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"https:\/\/i.imgur.com\/qZZB9BM.png"}]},{"type":"codeListing","syntax":"swift","code":["var images: [UIImage] = []","","var result in results {","  result.itemProvider.loadObject(ofClass: UIImage.self) { object, error in","    guard let image = object as? UIImage else { return }","    guard let resizedImage: UIImage = UIGraphicsImageRenderer(size: CGSize(width: 2_000, height: 2_000)).image { context in","      image.draw(in: CGRect(origin: CGPoint.zero, size: newSize))","    } else { return }","    images.append(resizedImage)","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"단순히 보기에는 아무런 문제가 없어보이죠."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"문제는 두 번에 걸쳐서 발생합니다."}]},{"anchor":"1-원본을-로드한다","level":3,"type":"heading","text":"1. 원본을 로드한다."},{"type":"codeListing","syntax":"swift","code":["guard let image = object as? UIImage else { return }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"첫 번째 문제입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이미지 사이즈를 줄이는 목적이 무엇이였나요?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"메모리에 부하를 덜 주기 위해서였죠."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"위 방법은 성공적으로 수행만 된다면 그 이후에는 메모리 사용률을 낮춰줄겁니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"그런데 이미지 크기를 줄이기 위해서 우선 원본 이미지를 한 번 로드해주어야 합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"그 한 번 로드하는 과정에서 백그라운드 작업들을 종료시키거나 심하면 앱 자체를 종료시키는 현상이 발생할 수 있습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"실제로 위 코드만 봐도 "},{"type":"codeVoice","code":"PHPicker"},{"type":"text","text":"는 선택한 데이터를 "},{"type":"codeVoice","code":"UIImage"},{"type":"text","text":" 타입으로서 제공하지 않습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"굳이 크기가 큰 그 데이터를 아무런 처리 없이 "},{"type":"codeVoice","code":"UIImage"},{"type":"text","text":"로 바로 변환하여 사용하고 있었던 것이죠!"}]},{"anchor":"2-작은-이미지를-직접-그린다","level":3,"type":"heading","text":"2. 작은 이미지를 직접 그린다."},{"type":"codeListing","syntax":"swift","code":["image.draw(in: CGRect(origin: .zero, size: newSize))"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"두 번째 문제입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"위 방법은 이미지를 불러와 그 이미지의 작은 버전을 "},{"type":"codeVoice","code":"draw"},{"type":"text","text":" 메서드를 사용하여 직접 그려줘야 하는 방법입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"그래픽 작업을 하는 것이기 때문에 CPU와 메모리 두 하드웨어 모두에게 작업을 부여하는 것이고, 이 또한 메모리 부하를 줄이는 것과는 거리가 먼 것을 알 수 있습니다."}]},{"anchor":"다운-샘플링","level":2,"type":"heading","text":"다운 샘플링"},{"type":"paragraph","inlineContent":[{"type":"text","text":"그러면 단순히 이미지를 리사이징 하는 방법 외에 어떤 방법이 있을까요?"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"https:\/\/i.imgur.com\/QEsP6KF.png"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"바로 데이터를 "},{"type":"codeVoice","code":"UIImage"},{"type":"text","text":"로 바로 변환하여 사용하는 것이 아니라 "},{"type":"codeVoice","code":"CGImage"},{"type":"text","text":" 타입의 데이터를 사용하여 디코딩할 파일(data buffer) 자체의 사이즈를 줄이는 다운샘플링 방법이 있습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"다만 이 방법은 "},{"type":"codeVoice","code":"Core Graphics"},{"type":"text","text":"이라는 한 층 더 low-level한 내용을 사용하기 때문에 코드가 좀 더 길고 복잡합니다."}]},{"type":"codeListing","syntax":"swift","code":["func downsample(at url: URL, to pointSize: CGSize, scale: CGFloat) -> Data? {","","  let sourceOptions = [kCGImageSourceShouldCache: false] as CFDictionary","","  guard let source = CGImageSourceCreateWithURL(url as CFURL, sourceOptions) else { return nil }","","  let maxDimensionInPixels = max(pointSize.width, pointSize.height) * scale","","  let downsampleOptions = [","    kCGImageSourceCreateThumbnailFromImageAlways: true,","    kCGImageSourceCreateThumbnailWithTransform: true,","    kCGImageSourceThumbnailMaxPixelSize: maxDimensionInPixels","  ] as CFDictionary","","  guard let cgImage = CGImageSourceCreateThumbnailAtIndex(source, 0, downsampleOptions) else { return nil }","","  let data = NSMutableData()","","  guard let imageDestination = CGImageDestinationCreateWithData(data, UTType.jpeg.identifier as CFString, 1, nil) else { return nil }","","  let isPNG: Bool = {","    guard let utType = cgImage.utType else { return false }","    return (utType as String) == UTType.png.identifier","  }()","","  let destinationProperties = [","    kCGImageDestinationLossyCompressionQuality: isPNG ? 1.0 : 0.75","  ] as CFDictionary","","  CGImageDestinationAddImage(imageDestination, cgImage, destinationProperties)","  CGImageDestinationFinalize(imageDestination)","","  return data as Data","}"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"어질어질하쥬..? 😵"}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"복잡해 보이지만 두 파트로 나눌 수 있습니다. 한 번 살펴봅시다."}]},{"anchor":"1-CGImage-생성","level":3,"type":"heading","text":"1. CGImage 생성"},{"type":"codeListing","syntax":"swift","code":["let sourceOptions = [kCGImageSourceShouldCache: false] as CFDictionary","guard let source = CGImageSourceCreateWithURL(url as CFURL, sourceOptions) else { return nil }","","let maxDimensionInPixels = max(pointSize.width, pointSize.height) * scale","let downsampleOptions = [","  kCGImageSourceCreateThumbnailFromImageAlways: true,  ","  kCGImageSourceShouldCacheImmediately: true,","  kCGImageSourceCreateThumbnailWithTransform: true,","  kCGImageSourceThumbnailMaxPixelSize: maxDimensionInPixels","] as CFDictionary","","guard let cgImage = CGImageSourceCreateThumbnailAtIndex(source, 0, downsampleOptions) else { return nil }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"downsampling의 핵심이 되는 부분입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"사실상 필수적인 로직들은 이 안에 다 있습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Option flag를 정의해주고 해당 옵션을 통해 "},{"type":"codeVoice","code":"CGImage"},{"type":"text","text":"를 생성해주는 방식입니다."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"kCGImageSourceShouldCache: false"},{"type":"text","text":" "},{"type":"text","text":"이미지 소스에 대한 참조값만을 생성하고 CGImageSource가 생성되는 즉시 디코딩을 진행하지 않습니다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"kCGImageSourceShouldCacheImmediately: true"},{"type":"text","text":" "},{"type":"text","text":"앞선 옵션과는 반대로 다운샘플링 로직이 시작됨과 동시에 디코딩 작업을 수행합니다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"kCGImageSourceCreateThumbnailWithTransform: true"},{"type":"text","text":" "},{"type":"text","text":"다운샘플링된 이미지를 원본 이미지와 같은 형태를 갖도록 합니다."}]}]}]},{"anchor":"2-PNG-퀄리티-보존","level":3,"type":"heading","text":"2. PNG 퀄리티 보존"},{"type":"codeListing","syntax":"swift","code":["let data = NSMutableData()","","guard let imageDestination = CGImageDestinationCreateWithData(data, UTType.jpeg.identifier as CFString, 1, nil) else { return nil }","","let isPNG: Bool = {","  guard let utType = cgImage.utType else { return false }","  return (utType as String) == UTType.png.identifier","}()","","let destinationProperties = [","  kCGImageDestinationLossyCompressionQuality: isPNG ? 1.0 : 0.75","] as CFDictionary","","CGImageDestinationAddImage(imageDestination, cgImage, destinationProperties)","CGImageDestinationFinalize(imageDestination)","","return data as Data"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이 부분은 사실 선택적으로 구현하면 되는 부분입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"PNG 확장자는 보통 스크린샷과 같이 이미지의 품질이 중요한 이미지들에 사용됩니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이러한 이미지의 품질이 손상된다면 이미지에 포함된 텍스트 등의 시인성, 가독성이 중요한 요소들에 영향이 갈 수 있습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"PNG 확장자라면 1.0의 손상 없는 압축을, 그 외의 확장자라면 0.75의 압축률로 데이터를 디코딩하였습니다."}]},{"anchor":"PHPicker와의-사용","level":2,"type":"heading","text":"PHPicker와의 사용"},{"type":"paragraph","inlineContent":[{"type":"text","text":"이전 "},{"type":"codeVoice","code":"PHPicker"},{"type":"text","text":"를 사용할 때는 아래와 같은 코드를 사용하였습니다."}]},{"type":"codeListing","syntax":"swift","code":["itemProvider.loadObject(ofClass: UIImage.self) { image, error in","  \/\/ do something","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이번 게시물에서 사용한 방법은 "},{"type":"codeVoice","code":"URL"},{"type":"text","text":" 타입으로 이미지를 받기 때문에 아래와 같이 사용해야 합니다."}]},{"type":"codeListing","syntax":"swift","code":["itemProvider.loadFileRepresentation(forTypeIdentifier: UTType.image.identifier) { url, error in","  \/\/ do something","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/junnosblog\/17.downsampling"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/17.DownSampling","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"모바일 환경에서 고해상도 이미지는 쓸 모 없 다."}],"kind":"article","metadata":{"roleHeading":"Article","title":"🍎 Swift - 다운샘플링","role":"article","modules":[{"name":"아요에스위프트"}]},"hierarchy":{"paths":[["doc:\/\/JunnosBlog\/documentation\/JunnosBlog","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/SwiftCategory"]]},"seeAlsoSections":[{"title":"Posts","identifiers":["doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/32.Regex01","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/16.PropertyWrapper","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/15.PHPicker","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/14.ReactorKit","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/13.RxWithoutRx","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/12.ScrollViewUsingAutoLayout","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/11.Bounds&Frame","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/10.ViewControllerLifeCycle","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/09.StructClass","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/08.ARC","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/07.Coordinator","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/06.MVVM_CleanArchitecture02","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/05.MVVM_CleanArchitecture01","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/04.RxSwift","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/03.Closure03","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/02.Closure02","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/01.Closure01"],"generated":true}],"references":{"https://i.imgur.com/QEsP6KF.png":{"alt":null,"type":"image","identifier":"https:\/\/i.imgur.com\/QEsP6KF.png","variants":[{"url":"https:\/\/i.imgur.com\/QEsP6KF.png","traits":["1x","light"]}]},"https://i.imgur.com/PIZF0mw.png":{"alt":null,"type":"image","identifier":"https:\/\/i.imgur.com\/PIZF0mw.png","variants":[{"url":"https:\/\/i.imgur.com\/PIZF0mw.png","traits":["1x","light"]}]},"doc://JunnosBlog/documentation/JunnosBlog/05.MVVM_CleanArchitecture01":{"role":"article","title":"🍎 Swift - MVVM, Clean Architecture.01","abstract":[{"type":"text","text":"iOS 개발자라면 꼭 알아야 할 아키텍처"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/05.MVVM_CleanArchitecture01","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/05.mvvm_cleanarchitecture01"},"doc://JunnosBlog/documentation/JunnosBlog/13.RxWithoutRx":{"role":"article","title":"🍎 Swift - Rx 없이 Reactive Binding 해보기","abstract":[{"type":"text","text":"Rx없이 Rx와 같은 기능을 구현해볼까요?"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/13.RxWithoutRx","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/13.rxwithoutrx"},"doc://JunnosBlog/documentation/JunnosBlog/SwiftCategory":{"images":[{"type":"card","identifier":"Swift.png"}],"role":"collectionGroup","title":"Swift","abstract":[{"type":"text","text":"This is Swift."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/SwiftCategory","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/swiftcategory"},"doc://JunnosBlog/documentation/JunnosBlog/14.ReactorKit":{"role":"article","title":"🍎 Swift - ReactorKit","abstract":[{"type":"text","text":"협업을 위한 ViewModel 솔루션: ReactorKit"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/14.ReactorKit","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/14.reactorkit"},"doc://JunnosBlog/documentation/JunnosBlog/15.PHPicker":{"role":"article","title":"🍎 Swift - PHPicker","abstract":[{"type":"text","text":"안전하고 간편한 새로운 Photo Picker!"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/15.PHPicker","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/15.phpicker"},"doc://JunnosBlog/documentation/JunnosBlog/32.Regex01":{"role":"article","title":"🍎 Swift - Regex.01","abstract":[{"type":"text","text":"아는 사람들은 잘 써먹는 그것."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/32.Regex01","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/32.regex01"},"Swift.png":{"alt":"Swift","type":"image","identifier":"Swift.png","variants":[{"url":"\/images\/Swift.png","traits":["1x","light"]}]},"https://developer.apple.com/wwdc18/219":{"title":"Image and Graphics Best Practices - WWDC18 - Videos - Apple Developer","titleInlineContent":[{"type":"text","text":"Image and Graphics Best Practices - WWDC18 - Videos - Apple Developer"}],"type":"link","identifier":"https:\/\/developer.apple.com\/wwdc18\/219","url":"https:\/\/developer.apple.com\/wwdc18\/219"},"doc://JunnosBlog/documentation/JunnosBlog/02.Closure02":{"role":"article","title":"🍎 Swift - 클로저(Closure).02","abstract":[{"type":"text","text":"Trailing 클로저에 대해 알아봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/02.Closure02","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/02.closure02"},"doc://JunnosBlog/documentation/JunnosBlog":{"role":"collection","title":"아요에스위프트","abstract":[],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog","kind":"symbol","type":"topic","url":"\/documentation\/junnosblog"},"doc://JunnosBlog/documentation/JunnosBlog/03.Closure03":{"role":"article","title":"🍎 Swift - 클로저(Closure).03","abstract":[{"type":"codeVoice","code":"@escaping"},{"type":"text","text":" 클로저에 대해 알아봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/03.Closure03","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/03.closure03"},"doc://JunnosBlog/documentation/JunnosBlog/11.Bounds&Frame":{"role":"article","title":"🍎 Swift - Bounds vs Frame","abstract":[{"type":"text","text":"View의 크기와 몸집"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/11.Bounds&Frame","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/11.bounds&frame"},"doc://JunnosBlog/documentation/JunnosBlog/07.Coordinator":{"role":"article","title":"🍎 Swift - Coordinator 패턴","abstract":[{"type":"text","text":"Navigation 해결사 등장"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/07.Coordinator","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/07.coordinator"},"doc://JunnosBlog/documentation/JunnosBlog/01.Closure01":{"role":"article","title":"🍎 Swift - 클로저(Closure).01","abstract":[{"type":"text","text":"팔방미인 클로저에 대해 알아봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/01.Closure01","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/01.closure01"},"doc://JunnosBlog/documentation/JunnosBlog/08.ARC":{"role":"article","title":"🍎 Swift - ARC(strong, weak, unowned)","abstract":[{"type":"text","text":"쎈 애랑 약한 애랑 없는 애"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/08.ARC","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/08.arc"},"doc://JunnosBlog/documentation/JunnosBlog/04.RxSwift":{"role":"article","title":"🍎 Swift - RxSwift","abstract":[{"type":"text","text":"Reactive한 Swift의 시작"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/04.RxSwift","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/04.rxswift"},"doc://JunnosBlog/documentation/JunnosBlog/12.ScrollViewUsingAutoLayout":{"role":"article","title":"🍎 Swift - ScrollView 오토 레이아웃으로 구현하기","abstract":[{"type":"text","text":"ScrollView 오토레이아웃을 StoryBoard에서 잡아보자!"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/12.ScrollViewUsingAutoLayout","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/12.scrollviewusingautolayout"},"doc://JunnosBlog/documentation/JunnosBlog/06.MVVM_CleanArchitecture02":{"role":"article","title":"🍎 Swift - MVVM, Clean Architecture.02","abstract":[{"type":"text","text":"두 아키텍처를 결합해봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/06.MVVM_CleanArchitecture02","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/06.mvvm_cleanarchitecture02"},"doc://JunnosBlog/documentation/JunnosBlog/09.StructClass":{"role":"article","title":"🍎 Swift - Struct vs Class","abstract":[{"type":"text","text":"구조체와 클래스"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/09.StructClass","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/09.structclass"},"doc://JunnosBlog/documentation/JunnosBlog/16.PropertyWrapper":{"role":"article","title":"🍎 Swift - Property Wrapper","abstract":[{"type":"text","text":"안전하고 간편한 새로운 Photo Picker!"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/16.PropertyWrapper","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/16.propertywrapper"},"https://i.imgur.com/qZZB9BM.png":{"alt":null,"type":"image","identifier":"https:\/\/i.imgur.com\/qZZB9BM.png","variants":[{"url":"https:\/\/i.imgur.com\/qZZB9BM.png","traits":["1x","light"]}]},"doc://JunnosBlog/documentation/JunnosBlog/10.ViewControllerLifeCycle":{"role":"article","title":"🍎 Swift - View Controller의 Life Cycle","abstract":[{"type":"text","text":"View Controller의 삶과 죽음"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/10.ViewControllerLifeCycle","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/10.viewcontrollerlifecycle"}}}