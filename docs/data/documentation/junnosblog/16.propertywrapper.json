{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"오늘은 UserDefaults를 어떻게 하면 조금이라도 더 편하게 사용할 수 있을까 고민하다가 아주 좋은 친구를 발견했습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"바로 Property Wrapper라는 친구인데요."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이 친구는 SwiftUI와 Combine의 기능을 UIKit에서도 적용할 수 있도록 Swift 5.1버전에 등장했습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"많은 게시물에서 SwiftUI의 "},{"type":"codeVoice","code":"@State"},{"type":"text","text":"를 예시로 들며 설명하고 있는데, 저는 경험이 없어서.. 넘어가구요…"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이름을 보면 프로퍼티를 감싸서 뭔가를 하는 친구인 것 같죠?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"바로 알아보도록 하겠습니다."}]},{"anchor":"용도","level":2,"type":"heading","text":"용도"},{"type":"paragraph","inlineContent":[{"type":"text","text":"일단 어떤 개념으로 사용되는 건지부터 알아봅시다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift에는 "},{"type":"codeVoice","code":"lazy"},{"type":"text","text":" 프로퍼티 라는 것이 있습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"해당 프로퍼티가 사용될 때 로드를 시작하도록 해주는 키워드이죠."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이 "},{"type":"codeVoice","code":"lazy"},{"type":"text","text":" 키워드는 모든 키워드들에 붙일 수 있고 동일한 동작을 합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"만약 이 키워드가 없다면 해당 기능을 구현하기 위해서 어떤 과정을 밟게 될까요?"}]},{"type":"codeListing","syntax":"swift","code":["func getMyClass() -> MyClass {","  if self.myVar == nil {","    self.myVar = MyClass()","  }","  return self.myVar","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"위와 같이 해당 프로퍼티가 초기화가 됐는지 확인을 한 후에 값을 불러오는 함수를 만들어 모든 프로퍼티에 직접 구현하며 적용시켜주어야 할 거에요."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"다행히도 위 동작을 우리는"}]},{"type":"codeListing","syntax":"swift","code":["lazy var myClass = MyClass()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이렇게 간편하게 구현할 수 있습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Property Wrapper는 "},{"type":"codeVoice","code":"lazy"},{"type":"text","text":"와 같이 동일한 동작을 하는 프로퍼티들에 대해서 공통적으로 미리 구현된 동작들을 부여할 수 있는 기능입니다."}]},{"anchor":"정의","level":2,"type":"heading","text":"정의"},{"type":"paragraph","inlineContent":[{"type":"text","text":"프로퍼티를 감싸는 기능이기 때문에 우선 프로퍼티를 가질 수 있는 class, struct, enum 앞에 "},{"type":"codeVoice","code":"@propertyWrapper"},{"type":"text","text":"를 붙여 정의합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"예시로 UserDefaults로 자동으로 동기화 작업을 하는 프로퍼티를 만들어보겠습니다."}]},{"type":"codeListing","syntax":"swift","code":["@propertyWrapper","struct UserDeafult<T> {","  var key: String","  var defaultValue: T","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"그런데 이렇게까지만 하면 해당 프로퍼티에 변경이 있을 때마다 어떤 작업이 실행되는지에 대한 명시가 없죠."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"그래서 에러가 발생하고, 그 에러를 살펴보면 "},{"type":"codeVoice","code":"wrappedValue"},{"type":"text","text":"가 정의되지 않았다는 것을 알 수 있습니다."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"wrappedValue"},{"type":"text","text":"를 정의해주고, "},{"type":"codeVoice","code":"get-set"},{"type":"text","text":"을 사용하여 해당 프로퍼티가 변경될 때마다 발생하는 로직을 넣어줍니다."}]},{"type":"codeListing","syntax":"swift","code":["var wrappedValue: T {","  get {","    UserDefaults.standard.object(forKey: key) as? T ?? defaultValue","  }","  set {","    UserDefaults.standard.set(newValue, forKey: key)","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이제 합쳐볼까요?"}]},{"type":"codeListing","syntax":"swift","code":["@propertyWrapper","struct UserDefault<T> {","  var key: String","  var defaultValue: T","","  var wrappedValue: T {","    get {","      UserDefaults.standard.object(forKey: key) as? T ?? defaultValue","    }","    set {","      UserDefaults.standard.get(newValue, forKey: key)","    }","  }","}"]},{"anchor":"사용","level":2,"type":"heading","text":"사용"},{"type":"paragraph","inlineContent":[{"type":"text","text":"자 그럼 적용은 어떻게 할까요?"}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"lazy"},{"type":"text","text":"와 마찬가지로 앞에 명시해주면 됩니다."}]},{"type":"codeListing","syntax":"swift","code":["struct AppData {","  @UserDefault(key: \"isLoggedIn\", defaultValue: false)","  static var isLoggedIn: Bool","","  @UserDefault(key: \"username\", defaultValue: \"\")","  static var username: String","}","","AppData.isLoggedIn = true","print(AppData.isLoggedIn) \/\/ true","","print(AppData.username) \/\/ \"\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"조금 더 나아가서 커스텀 타입에도 적용될 수 있도록 바꿔봅시다."}]},{"type":"codeListing","syntax":"swift","code":["@propertyWrapper","struct UserDefault<T: Codable> {","  \/\/ key와 default 값은 바뀔 일이 없으니 let으로 변경","  private let key: String","  private let defaultValue: T","","  init(key: String, defaultValue: T) {","    self.key = key","    self.defaultValue = defaultValue","  }","","  var wrappedValue: T {","    get {","      guard let data = Userdefaults.standard.object(forKey: key) as? Data else {","        return defaultValue","      }","      let value = try? JSONDecoder().decode(T.self, from: data)","      return value ?? defaultValue","    }","    set {","      let data = try? JSONEncoder().encode(newValue)","      UserDefaults.standard.set(data, forKey: key)","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이렇게 자동으로 "},{"type":"codeVoice","code":"UserDefaults"},{"type":"text","text":"로 값을 동기화시켜주는 Property Wrapper를 만들고 적용해보았습니다."}]},{"anchor":"참고-게시물","level":2,"type":"heading","text":"참고 게시물"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/medium.com\/better-programming\/create-the-perfect-userdefaults-wrapper-using-property-wrapper-42ca76005ac8"}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/junnosblog\/16.propertywrapper"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/16.PropertyWrapper","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"안전하고 간편한 새로운 Photo Picker!"}],"kind":"article","metadata":{"roleHeading":"Article","title":"🍎 Swift - Property Wrapper","role":"article","modules":[{"name":"아요에스위프트"}]},"hierarchy":{"paths":[["doc:\/\/JunnosBlog\/documentation\/JunnosBlog","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/SwiftCategory"]]},"seeAlsoSections":[{"title":"Posts","identifiers":["doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/32.Regex01","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/17.DownSampling","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/15.PHPicker","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/14.ReactorKit","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/13.RxWithoutRx","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/12.ScrollViewUsingAutoLayout","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/11.Bounds&Frame","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/10.ViewControllerLifeCycle","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/09.StructClass","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/08.ARC","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/07.Coordinator","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/06.MVVM_CleanArchitecture02","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/05.MVVM_CleanArchitecture01","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/04.RxSwift","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/03.Closure03","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/02.Closure02","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/01.Closure01"],"generated":true}],"references":{"https://medium.com/better-programming/create-the-perfect-userdefaults-wrapper-using-property-wrapper-42ca76005ac8":{"title":"# Create the Perfect UserDefaults Wrapper Using Property Wrapper","titleInlineContent":[{"type":"text","text":"# Create the Perfect UserDefaults Wrapper Using Property Wrapper"}],"type":"link","identifier":"https:\/\/medium.com\/better-programming\/create-the-perfect-userdefaults-wrapper-using-property-wrapper-42ca76005ac8","url":"https:\/\/medium.com\/better-programming\/create-the-perfect-userdefaults-wrapper-using-property-wrapper-42ca76005ac8"},"doc://JunnosBlog/documentation/JunnosBlog/07.Coordinator":{"role":"article","title":"🍎 Swift - Coordinator 패턴","abstract":[{"type":"text","text":"Navigation 해결사 등장"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/07.Coordinator","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/07.coordinator"},"doc://JunnosBlog/documentation/JunnosBlog/32.Regex01":{"role":"article","title":"🍎 Swift - Regex.01","abstract":[{"type":"text","text":"아는 사람들은 잘 써먹는 그것."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/32.Regex01","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/32.regex01"},"doc://JunnosBlog/documentation/JunnosBlog/01.Closure01":{"role":"article","title":"🍎 Swift - 클로저(Closure).01","abstract":[{"type":"text","text":"팔방미인 클로저에 대해 알아봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/01.Closure01","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/01.closure01"},"doc://JunnosBlog/documentation/JunnosBlog/14.ReactorKit":{"role":"article","title":"🍎 Swift - ReactorKit","abstract":[{"type":"text","text":"협업을 위한 ViewModel 솔루션: ReactorKit"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/14.ReactorKit","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/14.reactorkit"},"doc://JunnosBlog/documentation/JunnosBlog/11.Bounds&Frame":{"role":"article","title":"🍎 Swift - Bounds vs Frame","abstract":[{"type":"text","text":"View의 크기와 몸집"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/11.Bounds&Frame","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/11.bounds&frame"},"doc://JunnosBlog/documentation/JunnosBlog/04.RxSwift":{"role":"article","title":"🍎 Swift - RxSwift","abstract":[{"type":"text","text":"Reactive한 Swift의 시작"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/04.RxSwift","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/04.rxswift"},"Swift.png":{"alt":"Swift","type":"image","identifier":"Swift.png","variants":[{"url":"\/images\/Swift.png","traits":["1x","light"]}]},"doc://JunnosBlog/documentation/JunnosBlog/15.PHPicker":{"role":"article","title":"🍎 Swift - PHPicker","abstract":[{"type":"text","text":"안전하고 간편한 새로운 Photo Picker!"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/15.PHPicker","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/15.phpicker"},"doc://JunnosBlog/documentation/JunnosBlog/17.DownSampling":{"role":"article","title":"🍎 Swift - 다운샘플링","abstract":[{"type":"text","text":"모바일 환경에서 고해상도 이미지는 쓸 모 없 다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/17.DownSampling","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/17.downsampling"},"doc://JunnosBlog/documentation/JunnosBlog/09.StructClass":{"role":"article","title":"🍎 Swift - Struct vs Class","abstract":[{"type":"text","text":"구조체와 클래스"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/09.StructClass","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/09.structclass"},"doc://JunnosBlog/documentation/JunnosBlog":{"role":"collection","title":"아요에스위프트","abstract":[],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog","kind":"symbol","type":"topic","url":"\/documentation\/junnosblog"},"doc://JunnosBlog/documentation/JunnosBlog/12.ScrollViewUsingAutoLayout":{"role":"article","title":"🍎 Swift - ScrollView 오토 레이아웃으로 구현하기","abstract":[{"type":"text","text":"ScrollView 오토레이아웃을 StoryBoard에서 잡아보자!"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/12.ScrollViewUsingAutoLayout","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/12.scrollviewusingautolayout"},"doc://JunnosBlog/documentation/JunnosBlog/08.ARC":{"role":"article","title":"🍎 Swift - ARC(strong, weak, unowned)","abstract":[{"type":"text","text":"쎈 애랑 약한 애랑 없는 애"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/08.ARC","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/08.arc"},"doc://JunnosBlog/documentation/JunnosBlog/05.MVVM_CleanArchitecture01":{"role":"article","title":"🍎 Swift - MVVM, Clean Architecture.01","abstract":[{"type":"text","text":"iOS 개발자라면 꼭 알아야 할 아키텍처"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/05.MVVM_CleanArchitecture01","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/05.mvvm_cleanarchitecture01"},"doc://JunnosBlog/documentation/JunnosBlog/13.RxWithoutRx":{"role":"article","title":"🍎 Swift - Rx 없이 Reactive Binding 해보기","abstract":[{"type":"text","text":"Rx없이 Rx와 같은 기능을 구현해볼까요?"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/13.RxWithoutRx","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/13.rxwithoutrx"},"doc://JunnosBlog/documentation/JunnosBlog/02.Closure02":{"role":"article","title":"🍎 Swift - 클로저(Closure).02","abstract":[{"type":"text","text":"Trailing 클로저에 대해 알아봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/02.Closure02","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/02.closure02"},"doc://JunnosBlog/documentation/JunnosBlog/SwiftCategory":{"images":[{"type":"card","identifier":"Swift.png"}],"role":"collectionGroup","title":"Swift","abstract":[{"type":"text","text":"This is Swift."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/SwiftCategory","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/swiftcategory"},"doc://JunnosBlog/documentation/JunnosBlog/03.Closure03":{"role":"article","title":"🍎 Swift - 클로저(Closure).03","abstract":[{"type":"codeVoice","code":"@escaping"},{"type":"text","text":" 클로저에 대해 알아봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/03.Closure03","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/03.closure03"},"doc://JunnosBlog/documentation/JunnosBlog/06.MVVM_CleanArchitecture02":{"role":"article","title":"🍎 Swift - MVVM, Clean Architecture.02","abstract":[{"type":"text","text":"두 아키텍처를 결합해봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/06.MVVM_CleanArchitecture02","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/06.mvvm_cleanarchitecture02"},"doc://JunnosBlog/documentation/JunnosBlog/10.ViewControllerLifeCycle":{"role":"article","title":"🍎 Swift - View Controller의 Life Cycle","abstract":[{"type":"text","text":"View Controller의 삶과 죽음"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/10.ViewControllerLifeCycle","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/10.viewcontrollerlifecycle"}}}