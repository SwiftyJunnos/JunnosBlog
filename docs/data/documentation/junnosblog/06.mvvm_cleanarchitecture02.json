{"primaryContentSections":[{"kind":"content","content":[{"anchor":"","level":2,"type":"heading","text":""},{"type":"paragraph","inlineContent":[{"type":"text","text":"이번 포스트에서는 제 프로젝트를 예시로 iOS 프로젝트에 MVVM+Clean Architecture 구조를 적용해보겠습니다!"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"저번 포스팅을 작성하고도 헷갈리는 부분들이 많아서 계속해서 정보들을 찾아봤습니다. 그러다가 아주 좋은 포스트를 발견했는데, 오늘은 해당 포스트를 기반으로 내용을 정리해보겠습니다. 제 포스트를 보시는 분들도 아래 포스트를 자세히 읽어보는 것을 추천합니다 👍"}]},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/tech.olx.com\/clean-architecture-and-mvvm-on-ios-c9d167d9f5b3"}]},{"anchor":"MVVM-+-Clean-Architecture","level":2,"type":"heading","text":"MVVM + Clean Architecture"},{"type":"paragraph","inlineContent":[]},{"type":"paragraph","inlineContent":[{"type":"text","text":"해당 게시물을 보면 위와 같이 크게 세 가지 레이어로 구성을 나누었습니다. 이런 의문점이 들 수 있습니다. 저번 포스트에서는 4가지로 나뉘었는데 Clean Architecture 구조가 아닌거 아닌가요?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Clean Architecture의 핵심은 의존성에 있습니다. 안쪽 레이어부터 바깥 레이어로의 의존성 방향이 있지만 않으면 레이어의 개수나 구조는 아무 상관이 없죠. 따라서 위와 같은 구조도 아무 문제가 없는 것입니다!"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"위 게시물에 따른 레이어의 종류는 아래과 같습니다."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Presentation Layer"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Domain Layer"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Data Layer"}]}]}]},{"anchor":"","level":2,"type":"heading","text":""},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Domain Layer"}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Domain Layer"}]},{"type":"text","text":"는 가장 안쪽의 레이어입니다. 따라서 아무런 의존성을 가지지 말아야하고, 독립되어 있어야합니다. 이로서 얻을 수 있는 이점으로는 아무론 종속성이 없기 때문에 테스트하기 매우 간편하다는 점입니다. 다른 파일의 수정이나 추가 없이 오직 Domain Layer에만 집중해도 결과가 도출되죠."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Entities, Use Cases, Repository Interfaces들이 Domain Layer에 속합니다."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Presentation Layer"}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Presentation Layer"}]},{"type":"text","text":"에는 말 그대로 UI 요소들이 속합니다. 대표적으로 "},{"type":"strong","inlineContent":[{"type":"text","text":"View Model"}]},{"type":"text","text":"이 여기에 속하여 Use Cases의 함수들을 호출합니다."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Presentation Layer는 오직 Domain Layer에만 종속되어 있습니다."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Data Layer"}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Data Layer"}]},{"type":"text","text":"에는 "},{"type":"strong","inlineContent":[{"type":"text","text":"Repository"}]},{"type":"text","text":"와 "},{"type":"strong","inlineContent":[{"type":"text","text":"Data Sources"}]},{"type":"text","text":"들이 속합니다. 여기서 Repository는 외부의 Data Sources로부터 데이터를 받아올 때 사용되고, Data Sources들은 로컬 데이터들을 의미합니다."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Data Layer 또한 오직 Domain Layer에만 종속되어 있습니다."}]}],"type":"aside","name":"Note"},{"anchor":"✔️-적용하기","level":3,"type":"heading","text":"✔️ 적용하기"},{"type":"paragraph","inlineContent":[{"type":"text","text":"위 포스트와 제가 배워온대로 그림을 그려보면 아래와 같이 나와야합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"그런데 구조가 이렇게 되면 Use Case가 Repository를 호출하는데, 참조 관계는 반대로 되어 있는 아주 잘못된 현상이 발생하게 됩니다. 안쪽 레이어가 바깥 쪽 레이어를 참조하다니, Clean Architecture의 규칙을 깨부수고 있네요 😫"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"하지만 Use Case는 꼭 Repository에 Request를 해야합니다. 이럴 땐 어떻게 해야할까요?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"바로 위와 같이 중간에 한 단계를 더 거치게 만들면 됩니다. 위 레이어 설명에서 Domain Layer에 "},{"type":"strong","inlineContent":[{"type":"text","text":"Repository Interface"}]},{"type":"text","text":"가 포함되어 있었죠? 이 친구가 바로 여기에 쓰입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Repository Interface는 프로토콜의 형태로서 Use Case와 같은 레이어에 속해있지만, 실제 구현은 Data 레이어에 있게 됩니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"데이터의 흐름을 살펴보고 실제 구현에 들어가보겠습니다."}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"View가 View Model의 함수를 요청한다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"View Model이 Use Case를 실행한다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use Case가 User와 Repository로부터 얻은 데이터를 활용하여 결과를 도출합니다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"이 때, Repository는 네트워크(ex: API)와 Local DB(ex: Realm)로부터 데이터를 받아와 Use Case에 제공합니다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use Case에서 도출된 결과를 거꾸로 View에 제공합니다."}]}]}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/junnosblog\/06.mvvm_cleanarchitecture02"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/06.MVVM_CleanArchitecture02","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"두 아키텍처를 결합해봅시다."}],"kind":"article","metadata":{"roleHeading":"Article","title":"🍎 Swift - MVVM, Clean Architecture.02","role":"article","modules":[{"name":"아요에스위프트"}]},"hierarchy":{"paths":[["doc:\/\/JunnosBlog\/documentation\/JunnosBlog","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/SwiftCategory"]]},"seeAlsoSections":[{"title":"Posts","identifiers":["doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/32.Regex01","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/10.ViewControllerLifeCycle","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/09.StructClass","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/08.ARC","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/07.Coordinator","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/05.MVVM_CleanArchitecture01","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/04.RxSwift","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/03.Closure03","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/02.Closure02","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/01.Closure01"],"generated":true}],"references":{"doc://JunnosBlog/documentation/JunnosBlog/08.ARC":{"role":"article","title":"🍎 Swift - ARC(strong, weak, unowned)","abstract":[{"type":"text","text":"쎈 애랑 약한 애랑 없는 애"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/08.ARC","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/08.arc"},"doc://JunnosBlog/documentation/JunnosBlog/32.Regex01":{"role":"article","title":"🍎 Swift - Regex.01","abstract":[{"type":"text","text":"아는 사람들은 잘 써먹는 그것."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/32.Regex01","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/32.regex01"},"doc://JunnosBlog/documentation/JunnosBlog/01.Closure01":{"role":"article","title":"🍎 Swift - 클로저(Closure).01","abstract":[{"type":"text","text":"팔방미인 클로저에 대해 알아봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/01.Closure01","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/01.closure01"},"doc://JunnosBlog/documentation/JunnosBlog/10.ViewControllerLifeCycle":{"role":"article","title":"🍎 Swift - View Controller의 Life Cycle","abstract":[{"type":"text","text":"View Controller의 삶과 죽음"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/10.ViewControllerLifeCycle","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/10.viewcontrollerlifecycle"},"doc://JunnosBlog/documentation/JunnosBlog/05.MVVM_CleanArchitecture01":{"role":"article","title":"🍎 Swift - MVVM, Clean Architecture.01","abstract":[{"type":"text","text":"iOS 개발자라면 꼭 알아야 할 아키텍처"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/05.MVVM_CleanArchitecture01","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/05.mvvm_cleanarchitecture01"},"doc://JunnosBlog/documentation/JunnosBlog/02.Closure02":{"role":"article","title":"🍎 Swift - 클로저(Closure).02","abstract":[{"type":"text","text":"Trailing 클로저에 대해 알아봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/02.Closure02","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/02.closure02"},"https://tech.olx.com/clean-architecture-and-mvvm-on-ios-c9d167d9f5b3":{"title":"Clean Architecture and MVVM on iOS","titleInlineContent":[{"type":"text","text":"Clean Architecture and MVVM on iOS"}],"type":"link","identifier":"https:\/\/tech.olx.com\/clean-architecture-and-mvvm-on-ios-c9d167d9f5b3","url":"https:\/\/tech.olx.com\/clean-architecture-and-mvvm-on-ios-c9d167d9f5b3"},"Swift.png":{"alt":"Swift","type":"image","identifier":"Swift.png","variants":[{"url":"\/images\/Swift.png","traits":["1x","light"]}]},"doc://JunnosBlog/documentation/JunnosBlog/03.Closure03":{"role":"article","title":"🍎 Swift - 클로저(Closure).03","abstract":[{"type":"codeVoice","code":"@escaping"},{"type":"text","text":" 클로저에 대해 알아봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/03.Closure03","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/03.closure03"},"doc://JunnosBlog/documentation/JunnosBlog/07.Coordinator":{"role":"article","title":"🍎 Swift - Coordinator 패턴","abstract":[{"type":"text","text":"Navigation 해결사 등장"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/07.Coordinator","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/07.coordinator"},"doc://JunnosBlog/documentation/JunnosBlog":{"role":"collection","title":"아요에스위프트","abstract":[],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog","kind":"symbol","type":"topic","url":"\/documentation\/junnosblog"},"doc://JunnosBlog/documentation/JunnosBlog/04.RxSwift":{"role":"article","title":"🍎 Swift - RxSwift","abstract":[{"type":"text","text":"Reactive한 Swift의 시작"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/04.RxSwift","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/04.rxswift"},"doc://JunnosBlog/documentation/JunnosBlog/09.StructClass":{"role":"article","title":"🍎 Swift - Struct vs Class","abstract":[{"type":"text","text":"구조체와 클래스"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/09.StructClass","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/09.structclass"},"doc://JunnosBlog/documentation/JunnosBlog/SwiftCategory":{"images":[{"type":"card","identifier":"Swift.png"}],"role":"collectionGroup","title":"Swift","abstract":[{"type":"text","text":"This is Swift."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/SwiftCategory","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/swiftcategory"}}}