{"primaryContentSections":[{"kind":"content","content":[{"anchor":"ReactorKit","level":2,"type":"heading","text":"ReactorKit"},{"type":"paragraph","inlineContent":[{"type":"text","text":"앱스토어에 등록된 앱들의 오픈소스를 훔쳐보면 꽤나 자주 보였던 ReactorKit입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"사실 막연하게 React Native랑 관련된건가보다~ 하고 지나치곤 했었는데.. 전혀 아니였죠? 😜"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"겨울 프로젝트 동안 사용해야 할 것 같아서 공부해보게 되었습니다!"}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"ReactorKit"}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"ReactorKit"}]},{"type":"text","text":"은 "},{"type":"strong","inlineContent":[{"type":"text","text":"RxSwift"}]},{"type":"text","text":"를 제대로, 또 편하게 사용하기 위해 나온 프레임워크입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"공식 github에 설명된 글을 읽어보면, ReactorKit은 "},{"type":"strong","inlineContent":[{"type":"text","text":"리액티브"}]},{"type":"text","text":"하고 "},{"type":"strong","inlineContent":[{"type":"text","text":"일방성"}]},{"type":"text","text":"을 갖는 Swift 어플리케이션을 지원하기 위해 만들어졌다고 합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"리액티브한거야 RxSwift 기반이니 그렇다고 치고, "},{"type":"strong","inlineContent":[{"type":"text","text":"일방성"}]},{"type":"text","text":"에 주목하고 공부를 해보면 되겠네요!"}]},{"anchor":"기본-컨셉","level":2,"type":"heading","text":"기본 컨셉"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"https:\/\/i.imgur.com\/utDbuI4.png"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"ReactorKit은 "},{"type":"codeVoice","code":"View"},{"type":"text","text":"와 "},{"type":"codeVoice","code":"Reactor"},{"type":"text","text":"라는 것 사이를 유저의 "},{"type":"codeVoice","code":"Action"},{"type":"text","text":"과 뷰의 "},{"type":"codeVoice","code":"State"},{"type":"text","text":"를 "},{"type":"codeVoice","code":"Observable stream"},{"type":"text","text":"을 만들어 전달한다고 합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"당최 무슨 말인지 알 수가 없네요 🤯"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"하나씩 차근차근 봅시다."}]},{"anchor":"View","level":3,"type":"heading","text":"View"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"View"},{"type":"text","text":"는 우리가 생각하는 그 "},{"type":"codeVoice","code":"View"},{"type":"text","text":" 자체입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"화면을 표시하는 모든 요소들을 "},{"type":"codeVoice","code":"View"},{"type":"text","text":"라고 하고 이 "},{"type":"codeVoice","code":"View"},{"type":"text","text":"들은 유저의 입력을 action stream으로 "},{"type":"codeVoice","code":"bind"},{"type":"text","text":"하거나 각각의 UI Component들에게 view states를 "},{"type":"codeVoice","code":"bind"},{"type":"text","text":"한다고 합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"그러니까 "},{"type":"strong","inlineContent":[{"type":"text","text":"1. 유저의 인터랙션을 받거나"}]},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"2. 하위 UI Component들에게 Reactor의 상태를 알려준다"}]},{"type":"text","text":"는 뜻인 것 같네요."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이 "},{"type":"codeVoice","code":"View"},{"type":"text","text":"에는 비즈니스 로직이 없다고 합니다. 단지 전달자의 역할만 한다고 보면 될 것 같아요!"}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"View Controller"},{"type":"text","text":"가 "},{"type":"codeVoice","code":"View"},{"type":"text","text":"라는 것을 명시하기 위해서 "},{"type":"codeVoice","code":"View"},{"type":"text","text":" 프로토콜을 채택하라고 합니다."}]},{"type":"codeListing","syntax":"swift","code":["class ProfileViewController: UIViewController, View {","  var disposeBag = DisposeBag()","}"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"View"},{"type":"text","text":" 프로토콜을 채택하는 것 만으로 이 뷰컨은 "},{"type":"codeVoice","code":"reactor"},{"type":"text","text":" 프로퍼티를 갖게 됩니다."}]},{"type":"codeListing","syntax":"swift","code":["profileViewController.reactor = UserViewReactor()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"위와 같은 작업이 자동으로 이루어진다는 의미입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이렇게 주어진 "},{"type":"codeVoice","code":"reactor"},{"type":"text","text":"라는 프로퍼티가 변경되게 되면, "},{"type":"codeVoice","code":"bind(reactor:)"},{"type":"text","text":" 메서드가 자동으로 호출됩니다. action stream과 state stream을 정의하기 위해 뷰컨 안에 이 함수를 만들어줍시다."}]},{"type":"codeListing","syntax":"swift","code":["func bind(reactor: ProfileViewReactor) {","  \/\/ action (View -> Reactor)","  refreshButton.rx.tap.map { Reactor.Action.refresh }","    .bind(to: reactor.action)","    .disposed(by: self.disposeBag)","","  \/\/ state (Reactor -> View)","  reactor.state.map { $0.isFollowing }","    .bind(to: followButton.rx.isSelected)","    .disposed(by: self.disposeBag)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"스토리보드도 지원한다고 합니다!"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"스토리보드를 사용하는 뷰컨은 "},{"type":"codeVoice","code":"View"},{"type":"text","text":"가 아니라 "},{"type":"codeVoice","code":"StoryboardView"},{"type":"text","text":"를 채택해야 합니다!"}]},{"type":"codeListing","syntax":"swift","code":["class MyViewController: UIViewController, StoryboardView {","  func bind(reactor: MyReactor) {","    ...","  }","}"]},{"anchor":"Reactor","level":3,"type":"heading","text":"Reactor"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Reactor"},{"type":"text","text":"는 UI와는 전혀 관련없는 독립된 레이어 계층입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"하지만 "},{"type":"codeVoice","code":"View"},{"type":"text","text":"의 상태를 결정해주는 아주 중대한 역할을 합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"모든 "},{"type":"codeVoice","code":"View"},{"type":"text","text":"는 각자의 "},{"type":"codeVoice","code":"Reactor"},{"type":"text","text":"를 가져야하고, 모든 로직을 그 "},{"type":"codeVoice","code":"Reactor"},{"type":"text","text":"에 위임(delegate)합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"그러면서도 "},{"type":"codeVoice","code":"Reactor"},{"type":"text","text":"는 "},{"type":"codeVoice","code":"View"},{"type":"text","text":"에 대한 의존성이 1도 없기 때문에 Unit Test하기에도 수월하다고 하네요!"}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Reactor"},{"type":"text","text":"를 사용하기 위해서는 "},{"type":"codeVoice","code":"View"},{"type":"text","text":"와 마찬가지로 "},{"type":"codeVoice","code":"Reactor"},{"type":"text","text":" 프로토콜을 채택해야 합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이 프로토콜을 채택한 객체는 "},{"type":"codeVoice","code":"Action"},{"type":"text","text":", "},{"type":"codeVoice","code":"Mutation"},{"type":"text","text":", "},{"type":"codeVoice","code":"State"},{"type":"text","text":" 세가지 타입을 가져야합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"또한 "},{"type":"codeVoice","code":"initialState"},{"type":"text","text":"라는 프로퍼티도 가져야 한다고 합니다."}]},{"type":"codeListing","syntax":"swift","code":["class ProfileViewReactor: Reactor {","  \/\/ represent user actions","  enum Action {","    case refreshFollowingStatus(Int)","    case follow(Int)","  }","","  \/\/ represent state changes","  enum Mutation { ","    case setFollowing(Bool)","  }","","  \/\/ represents the current view state","  struct State {","    var isFollowing: Bool = false","  }","","  let initialState: State = State()","}"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Action"},{"type":"text","text":" "},{"type":"text","text":"유저 인터랙션을 의미합니다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"State"},{"type":"text","text":" "},{"type":"text","text":"View의 상태를 의미합니다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Mutation"},{"type":"text","text":" "},{"type":"codeVoice","code":"Action"},{"type":"text","text":"과 "},{"type":"codeVoice","code":"State"},{"type":"text","text":"를 이어주는 역할을 합니다."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Reactor"},{"type":"text","text":"는 두 단계를 거쳐 action stream을 state stream으로 변환합니다."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"https:\/\/i.imgur.com\/yJ9zsoJ.png"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"바로 "},{"type":"codeVoice","code":"mutate()"},{"type":"text","text":"와 "},{"type":"codeVoice","code":"reduce()"},{"type":"text","text":"를 통해서죠."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"mutate()"},{"type":"text","text":"는 "},{"type":"codeVoice","code":"Action"},{"type":"text","text":"을 받아 "},{"type":"codeVoice","code":"Observable<Mutation>"},{"type":"text","text":"을 생성합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"모든 비동기 작업들이나 API 호출 등이 여기에 들어가는 작업이라고 합니다."}]},{"type":"codeListing","syntax":"swift","code":["func mutate(action: Action) -> Observable<Mutation> {","  switch action {","  case let .refreshFollowingStatus(userID): \/\/ receive action","    return UserAPI.isFollowing(userID) \/\/ create API stream","      .map { (isFollowing: Bool) -> Mutation in","        return Mutation.setFollowing(isFollowing) \/\/ convert to Mutation stream","      }","  case let .follow(userID):","    return UserAPI.follow()","      .map { _ -> Mutation in","        return Mutation.setFollowing(true)","      }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"reduce()"},{"type":"text","text":"는 이전의 "},{"type":"codeVoice","code":"State"},{"type":"text","text":"와 "},{"type":"codeVoice","code":"Mutation"},{"type":"text","text":"으로부터 새로운 "},{"type":"codeVoice","code":"State"},{"type":"text","text":"를 만드는 메서드입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"새로운 "},{"type":"codeVoice","code":"State"},{"type":"text","text":"를 동기적으로 반환하는 기능 외의 기능은 넣지 말라고 하네요."}]},{"type":"codeListing","syntax":"swift","code":["func reduce(state: State, mutation: Mutation) -> State {","  var state = state \/\/ create a copy of old state","  switch mutation {","  case let .setFollowing(isFollowing):","    state.isFollowing = isFollowing \/\/ manipulate the state, creating a new state","    return state \/\/ return new state","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"transform()"},{"type":"text","text":"은 각 stream을 다른 stream으로 변환하는 기능을 하는 메서드입니다."}]},{"anchor":"심화","level":2,"type":"heading","text":"심화"},{"anchor":"Global-States","level":3,"type":"heading","text":"Global States"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Redux와 다르게 "},{"type":"strong","inlineContent":[{"type":"text","text":"ReactorKit"}]},{"type":"text","text":"은 global app state를 정의하지 않는다고 합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"저는 Redux가 뭔지 모르니 일단 넘어가볼게요.."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"그렇기 때문에 global state를 아무걸로나 관리할 수 있다고 합니다. "},{"type":"codeVoice","code":"BehaviorSubject"},{"type":"text","text":"나 "},{"type":"codeVoice","code":"PublishSubject"},{"type":"text","text":", 혹은 "},{"type":"codeVoice","code":"reactor"},{"type":"text","text":"를 사용해서 관리할 수 있다고 하네요."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"동시에 global state를 사용하도록 강제하지도 않는다고 합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"ReactorKit에는 "},{"type":"strong","inlineContent":[{"type":"text","text":"Action ➡️ Mutation ➡️ State Flow"}]},{"type":"text","text":"가 존재하지 않습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"그래서 global state를 "},{"type":"codeVoice","code":"Mutation"},{"type":"text","text":"으로 변환하려면 "},{"type":"codeVoice","code":"transform(mutation:)"},{"type":"text","text":"을 사용해야 합니다."}]},{"type":"codeListing","syntax":"swift","code":["var currentUser: BehaviorSubject<User> \/\/ global state","","func transform(mutation: Observable<Mutation>) -> Observable<Mutation> {","  return Observable.merge(mutation, currentUser.map(Mutation.setUser))","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"위 예시는 "},{"type":"codeVoice","code":"currentUser"},{"type":"text","text":"가 바뀔 때 "},{"type":"codeVoice","code":"Mutation.setUser"},{"type":"text","text":"를 실행해달라는 코드입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"기본적인 스트림인 "},{"type":"codeVoice","code":"mutation"},{"type":"text","text":"과 Global State의 "},{"type":"codeVoice","code":"currentUser"},{"type":"text","text":"를 병합("},{"type":"codeVoice","code":"merge"},{"type":"text","text":")시키는 코드인데요,"}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"currentUser"},{"type":"text","text":"는 "},{"type":"codeVoice","code":"Mutation.setUser"},{"type":"text","text":"로 정의된 "},{"type":"codeVoice","code":"Mutation"},{"type":"text","text":"으로 변환해서 들어가고 있네요."}]},{"anchor":"View-Communication","level":3,"type":"heading","text":"View Communication"},{"type":"paragraph","inlineContent":[{"type":"text","text":"View간의 데이터 전달이 이루어질 때 보통 "},{"type":"codeVoice","code":"delegate"},{"type":"text","text":" 패턴이나 "},{"type":"codeVoice","code":"closure"},{"type":"text","text":"를 사용하죠?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"ReactorKit은 데이터 전달에 위 두 가지 방법을 사용하지 말고 "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/ReactiveX\/RxSwift\/blob\/master\/RxSwift\/Reactive.swift"},{"type":"text","text":"을 사용하는 것을 추천한다고 합니다."}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Read as \"Reactive Extension where Base is a SomeType\"","extension Reactive where Base: SomeType {","  \/\/ Any specific reactive extension for SomeType","}"]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"https:\/\/i.imgur.com\/0zL1XoU.png"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"View A를 "},{"type":"codeVoice","code":"ChatViewController"},{"type":"text","text":", View B를 "},{"type":"codeVoice","code":"MessageInputView"},{"type":"text","text":"라고 합시다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"View B는 View A의 "},{"type":"codeVoice","code":"subview"},{"type":"text","text":"입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"View B가 View A에 "},{"type":"codeVoice","code":"ControlEvent"},{"type":"text","text":"를 보내면 View A에서 본인의 reactor인 Reactor A에 "},{"type":"codeVoice","code":"Action"},{"type":"text","text":"을 전달하는 시나리오입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"원래의 방식대로 View B에서 View A로 이벤트나 데이터를 전달하려면 "},{"type":"codeVoice","code":"delegate"},{"type":"text","text":"나 "},{"type":"codeVoice","code":"closure"},{"type":"text","text":"를 사용했었죠."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"대신 ReactorKit이 추천하는 방식대로 "},{"type":"codeVoice","code":"Reactive extension"},{"type":"text","text":"을 사용해서 구현을 해보면 아래와 같습니다."}]},{"type":"codeListing","syntax":"swift","code":["\/\/ MessageInputView.swift","extension Reactive where Base: MessageInputView {","  var sendButtonTap: ControlEvent<String> {","    let source = base.sendButton.rx.tap.withLatestFrom(...)","    return ControlEvent(events: source)","  }","}"]},{"type":"codeListing","syntax":"swift","code":["\/\/ ChatViewController.swift","messageInputView.rx.sendButtonTap","  .map(Reactor.Action.send)","  .bind(to: reactor.action)"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/junnosblog\/14.reactorkit"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/14.ReactorKit","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"협업을 위한 ViewModel 솔루션: ReactorKit"}],"kind":"article","metadata":{"roleHeading":"Article","title":"🍎 Swift - ReactorKit","role":"article","modules":[{"name":"아요에스위프트"}]},"hierarchy":{"paths":[["doc:\/\/JunnosBlog\/documentation\/JunnosBlog","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/SwiftCategory"]]},"seeAlsoSections":[{"title":"Posts","identifiers":["doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/32.Regex01","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/17.DownSampling","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/16.PropertyWrapper","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/15.PHPicker","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/13.RxWithoutRx","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/12.ScrollViewUsingAutoLayout","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/11.Bounds&Frame","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/10.ViewControllerLifeCycle","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/09.StructClass","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/08.ARC","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/07.Coordinator","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/06.MVVM_CleanArchitecture02","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/05.MVVM_CleanArchitecture01","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/04.RxSwift","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/03.Closure03","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/02.Closure02","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/01.Closure01"],"generated":true}],"references":{"doc://JunnosBlog/documentation/JunnosBlog/SwiftCategory":{"images":[{"type":"card","identifier":"Swift.png"}],"role":"collectionGroup","title":"Swift","abstract":[{"type":"text","text":"This is Swift."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/SwiftCategory","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/swiftcategory"},"doc://JunnosBlog/documentation/JunnosBlog/13.RxWithoutRx":{"role":"article","title":"🍎 Swift - Rx 없이 Reactive Binding 해보기","abstract":[{"type":"text","text":"Rx없이 Rx와 같은 기능을 구현해볼까요?"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/13.RxWithoutRx","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/13.rxwithoutrx"},"doc://JunnosBlog/documentation/JunnosBlog/04.RxSwift":{"role":"article","title":"🍎 Swift - RxSwift","abstract":[{"type":"text","text":"Reactive한 Swift의 시작"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/04.RxSwift","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/04.rxswift"},"doc://JunnosBlog/documentation/JunnosBlog/03.Closure03":{"role":"article","title":"🍎 Swift - 클로저(Closure).03","abstract":[{"type":"codeVoice","code":"@escaping"},{"type":"text","text":" 클로저에 대해 알아봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/03.Closure03","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/03.closure03"},"doc://JunnosBlog/documentation/JunnosBlog/11.Bounds&Frame":{"role":"article","title":"🍎 Swift - Bounds vs Frame","abstract":[{"type":"text","text":"View의 크기와 몸집"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/11.Bounds&Frame","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/11.bounds&frame"},"doc://JunnosBlog/documentation/JunnosBlog/06.MVVM_CleanArchitecture02":{"role":"article","title":"🍎 Swift - MVVM, Clean Architecture.02","abstract":[{"type":"text","text":"두 아키텍처를 결합해봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/06.MVVM_CleanArchitecture02","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/06.mvvm_cleanarchitecture02"},"doc://JunnosBlog/documentation/JunnosBlog":{"role":"collection","title":"아요에스위프트","abstract":[],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog","kind":"symbol","type":"topic","url":"\/documentation\/junnosblog"},"doc://JunnosBlog/documentation/JunnosBlog/32.Regex01":{"role":"article","title":"🍎 Swift - Regex.01","abstract":[{"type":"text","text":"아는 사람들은 잘 써먹는 그것."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/32.Regex01","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/32.regex01"},"Swift.png":{"alt":"Swift","type":"image","identifier":"Swift.png","variants":[{"url":"\/images\/Swift.png","traits":["1x","light"]}]},"doc://JunnosBlog/documentation/JunnosBlog/17.DownSampling":{"role":"article","title":"🍎 Swift - 다운샘플링","abstract":[{"type":"text","text":"모바일 환경에서 고해상도 이미지는 쓸 모 없 다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/17.DownSampling","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/17.downsampling"},"doc://JunnosBlog/documentation/JunnosBlog/10.ViewControllerLifeCycle":{"role":"article","title":"🍎 Swift - View Controller의 Life Cycle","abstract":[{"type":"text","text":"View Controller의 삶과 죽음"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/10.ViewControllerLifeCycle","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/10.viewcontrollerlifecycle"},"doc://JunnosBlog/documentation/JunnosBlog/16.PropertyWrapper":{"role":"article","title":"🍎 Swift - Property Wrapper","abstract":[{"type":"text","text":"안전하고 간편한 새로운 Photo Picker!"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/16.PropertyWrapper","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/16.propertywrapper"},"https://i.imgur.com/yJ9zsoJ.png":{"alt":null,"type":"image","identifier":"https:\/\/i.imgur.com\/yJ9zsoJ.png","variants":[{"url":"https:\/\/i.imgur.com\/yJ9zsoJ.png","traits":["1x","light"]}]},"doc://JunnosBlog/documentation/JunnosBlog/07.Coordinator":{"role":"article","title":"🍎 Swift - Coordinator 패턴","abstract":[{"type":"text","text":"Navigation 해결사 등장"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/07.Coordinator","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/07.coordinator"},"doc://JunnosBlog/documentation/JunnosBlog/15.PHPicker":{"role":"article","title":"🍎 Swift - PHPicker","abstract":[{"type":"text","text":"안전하고 간편한 새로운 Photo Picker!"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/15.PHPicker","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/15.phpicker"},"doc://JunnosBlog/documentation/JunnosBlog/01.Closure01":{"role":"article","title":"🍎 Swift - 클로저(Closure).01","abstract":[{"type":"text","text":"팔방미인 클로저에 대해 알아봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/01.Closure01","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/01.closure01"},"https://i.imgur.com/utDbuI4.png":{"alt":null,"type":"image","identifier":"https:\/\/i.imgur.com\/utDbuI4.png","variants":[{"url":"https:\/\/i.imgur.com\/utDbuI4.png","traits":["1x","light"]}]},"doc://JunnosBlog/documentation/JunnosBlog/02.Closure02":{"role":"article","title":"🍎 Swift - 클로저(Closure).02","abstract":[{"type":"text","text":"Trailing 클로저에 대해 알아봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/02.Closure02","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/02.closure02"},"https://github.com/ReactiveX/RxSwift/blob/master/RxSwift/Reactive.swift":{"title":"reactive extension","titleInlineContent":[{"type":"text","text":"reactive extension"}],"type":"link","identifier":"https:\/\/github.com\/ReactiveX\/RxSwift\/blob\/master\/RxSwift\/Reactive.swift","url":"https:\/\/github.com\/ReactiveX\/RxSwift\/blob\/master\/RxSwift\/Reactive.swift"},"doc://JunnosBlog/documentation/JunnosBlog/05.MVVM_CleanArchitecture01":{"role":"article","title":"🍎 Swift - MVVM, Clean Architecture.01","abstract":[{"type":"text","text":"iOS 개발자라면 꼭 알아야 할 아키텍처"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/05.MVVM_CleanArchitecture01","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/05.mvvm_cleanarchitecture01"},"doc://JunnosBlog/documentation/JunnosBlog/08.ARC":{"role":"article","title":"🍎 Swift - ARC(strong, weak, unowned)","abstract":[{"type":"text","text":"쎈 애랑 약한 애랑 없는 애"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/08.ARC","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/08.arc"},"doc://JunnosBlog/documentation/JunnosBlog/09.StructClass":{"role":"article","title":"🍎 Swift - Struct vs Class","abstract":[{"type":"text","text":"구조체와 클래스"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/09.StructClass","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/09.structclass"},"https://i.imgur.com/0zL1XoU.png":{"alt":null,"type":"image","identifier":"https:\/\/i.imgur.com\/0zL1XoU.png","variants":[{"url":"https:\/\/i.imgur.com\/0zL1XoU.png","traits":["1x","light"]}]},"doc://JunnosBlog/documentation/JunnosBlog/12.ScrollViewUsingAutoLayout":{"role":"article","title":"🍎 Swift - ScrollView 오토 레이아웃으로 구현하기","abstract":[{"type":"text","text":"ScrollView 오토레이아웃을 StoryBoard에서 잡아보자!"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/12.ScrollViewUsingAutoLayout","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/12.scrollviewusingautolayout"}}}