{"primaryContentSections":[{"kind":"content","content":[{"anchor":"구조체struct와-클래스class","level":2,"type":"heading","text":"구조체(struct)와 클래스(class)"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift에는 두 가지 데이터 타입이 있습니다. 바로 "},{"type":"codeVoice","code":"struct"},{"type":"text","text":"와 "},{"type":"codeVoice","code":"class"},{"type":"text","text":"입니다. 어느 정도 감으로 사용하고 있었지만 정확하게 알아보고 싶어서 공부를 해보겠습니다."}]},{"anchor":"값-타입-vs-참조-타입","level":3,"type":"heading","text":"값 타입 vs 참조 타입"},{"type":"paragraph","inlineContent":[{"type":"text","text":"정의의 차이로 설명하자면 "},{"type":"codeVoice","code":"class"},{"type":"text","text":"는 참조 타입, "},{"type":"codeVoice","code":"struct"},{"type":"text","text":"는 값 타입입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"값 타입인 "},{"type":"codeVoice","code":"struct"},{"type":"text","text":"에 소속된 인스턴스들은 값을 복사하여 새로운 인스턴스를 만들어 사용합니다. 참조 타입인 "},{"type":"codeVoice","code":"class"},{"type":"text","text":"에 소속된 인스턴스들은 참조 값이 전달됩니다."}]},{"anchor":"할당-메모리-영역","level":3,"type":"heading","text":"할당 메모리 영역"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"codeVoice","code":"struct"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"값 복사 방식을 사용하는 구조체는 메모리의 스택 영역에 할당됩니다. 따라서 스택 영역의 특징들을 갖습니다."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Thread-Safe하다. (스레드가 독립적으로 사용)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"한 번의 명령으로 할당&해제 가능 (스택 포인터 사용)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"컴파일 시간에 크기 배정"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"codeVoice","code":"class"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"참조 방식을 사용하는 클래스는 메모리의 힙 영역에 할당됩니다. 따라서 힙 영역의 특징들을 갖습니다."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"런타임에 크기가 배정된다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Thread-Safe하지 않다. (스레드가 공유하여 사용)"}]}]}]},{"anchor":"권장하는-타입은","level":3,"type":"heading","text":"권장하는 타입은?"},{"type":"paragraph","inlineContent":[{"type":"text","text":"애플은 되도록이면 "},{"type":"codeVoice","code":"struct"},{"type":"text","text":"를 사용하는 것을 권장하고 있습니다. 메모리 관리 시에 별도의 연산 과정이 필요하지 않고 속도도 빠르기 때문입니다. 그렇다면 "},{"type":"codeVoice","code":"class"},{"type":"text","text":"는 왜 사용할까요?"}]},{"anchor":"상속","level":2,"type":"heading","text":"상속"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"class"},{"type":"text","text":" 는 상속이 가능합니다. "},{"type":"codeVoice","code":"extension"},{"type":"text","text":"을 사용하여 기존의 "},{"type":"codeVoice","code":"class"},{"type":"text","text":"에서 확장된 버전의 "},{"type":"codeVoice","code":"class"},{"type":"text","text":"를 사용할 수 있습니다. 이 내용은 추후에 따로 다루고 링크를 남겨두도록 하겠습니다!"}]},{"anchor":"그럼-언제-뭘-쓸까요","level":3,"type":"heading","text":"그럼 언제 뭘 쓸까요?"},{"type":"paragraph","inlineContent":[{"type":"text","text":"그렇다면 언제 "},{"type":"codeVoice","code":"struct"},{"type":"text","text":"를, 언제 "},{"type":"codeVoice","code":"class"},{"type":"text","text":"를 사용해야 할까요?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"위에서 한 번 언급했던대로 애플은 "},{"type":"codeVoice","code":"struct"},{"type":"text","text":"를 사용하는 것을 권장하고 있습니다. Swift의 "},{"type":"codeVoice","code":"struct"},{"type":"text","text":"는 다른 언어에서는 "},{"type":"codeVoice","code":"class"},{"type":"text","text":"만이 갖고 있는 편리한 기능들을 상당 수 지원합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift의 "},{"type":"codeVoice","code":"struct"},{"type":"text","text":"는 저장\/연산 프로퍼티, 메서드, 심지어 프로토콜까지 사용할 수 있습니다. 실제로 애플은 대부분의 표준 라이브러리(숫자, 문자열, 배열, 딕셔너리 등)에 "},{"type":"codeVoice","code":"struct"},{"type":"text","text":"를 사용하고 있습니다."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"obj-c 언어와 상호 이용할 때는 "},{"type":"codeVoice","code":"class"},{"type":"text","text":"를 이용"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"obj-c의 API를 사용하여 데이터를 처리할 때는 "},{"type":"codeVoice","code":"class"},{"type":"text","text":"를 사용해야만 합니다. 따라서 이런 경우에는 클래스를 사용할 수 밖에 없습니다."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"고유한 값에 대한 제어가 필요할 때는  class  이용"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"class"},{"type":"text","text":"는 참조 타입이기 때문에 어느 한 곳에서 값을 수정하더라도 앱의 모든 곳에서 변경이 일어납니다. 이런 현상을 의도적으로 원한다면 "},{"type":"codeVoice","code":"class"},{"type":"text","text":"를 사용하면 좋습니다."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"상속과 공유를 모델링 할 때는 "},{"type":"codeVoice","code":"struct"},{"type":"text","text":"를 이용"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"class"},{"type":"text","text":"와 "},{"type":"codeVoice","code":"struct"},{"type":"text","text":"는 모두 상속을 지원합니다. 하지만 "},{"type":"codeVoice","code":"struct"},{"type":"text","text":"는 "},{"type":"codeVoice","code":"class"},{"type":"text","text":"로부터 상속되지는 못하고, "},{"type":"codeVoice","code":"protocol"},{"type":"text","text":"로부터만 차용될 수 있습니다."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"protocol"},{"type":"text","text":"은 클래스, 구조체, 열거형 데이터들이 상속할 수 있지만 "},{"type":"codeVoice","code":"class"},{"type":"text","text":"는 같은 "},{"type":"codeVoice","code":"class"},{"type":"text","text":"들끼리만 상속이 가능하기 때문에 데이터를 설계할 때 우선 "},{"type":"codeVoice","code":"protocol"},{"type":"text","text":"을 사용해보는 것을 추천합니다."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"참고 자료"}]},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/choosing-between-structures-and-classes"}]}],"type":"aside","name":"Note"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/junnosblog\/09.structclass"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/09.StructClass","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"구조체와 클래스"}],"kind":"article","metadata":{"roleHeading":"Article","title":"🍎 Swift - Struct vs Class","role":"article","modules":[{"name":"아요에스위프트"}]},"hierarchy":{"paths":[["doc:\/\/JunnosBlog\/documentation\/JunnosBlog","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/SwiftCategory"]]},"seeAlsoSections":[{"title":"Posts","identifiers":["doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/32.Regex01","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/17.DownSampling","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/16.PropertyWrapper","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/15.PHPicker","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/14.ReactorKit","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/13.RxWithoutRx","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/12.ScrollViewUsingAutoLayout","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/11.Bounds&Frame","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/10.ViewControllerLifeCycle","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/08.ARC","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/07.Coordinator","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/06.MVVM_CleanArchitecture02","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/05.MVVM_CleanArchitecture01","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/04.RxSwift","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/03.Closure03","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/02.Closure02","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/01.Closure01"],"generated":true}],"references":{"doc://JunnosBlog/documentation/JunnosBlog/15.PHPicker":{"role":"article","title":"🍎 Swift - PHPicker","abstract":[{"type":"text","text":"안전하고 간편한 새로운 Photo Picker!"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/15.PHPicker","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/15.phpicker"},"doc://JunnosBlog/documentation/JunnosBlog/17.DownSampling":{"role":"article","title":"🍎 Swift - 다운샘플링","abstract":[{"type":"text","text":"모바일 환경에서 고해상도 이미지는 쓸 모 없 다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/17.DownSampling","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/17.downsampling"},"doc://JunnosBlog/documentation/JunnosBlog/10.ViewControllerLifeCycle":{"role":"article","title":"🍎 Swift - View Controller의 Life Cycle","abstract":[{"type":"text","text":"View Controller의 삶과 죽음"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/10.ViewControllerLifeCycle","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/10.viewcontrollerlifecycle"},"doc://JunnosBlog/documentation/JunnosBlog/02.Closure02":{"role":"article","title":"🍎 Swift - 클로저(Closure).02","abstract":[{"type":"text","text":"Trailing 클로저에 대해 알아봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/02.Closure02","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/02.closure02"},"doc://JunnosBlog/documentation/JunnosBlog/04.RxSwift":{"role":"article","title":"🍎 Swift - RxSwift","abstract":[{"type":"text","text":"Reactive한 Swift의 시작"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/04.RxSwift","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/04.rxswift"},"doc://JunnosBlog/documentation/JunnosBlog/05.MVVM_CleanArchitecture01":{"role":"article","title":"🍎 Swift - MVVM, Clean Architecture.01","abstract":[{"type":"text","text":"iOS 개발자라면 꼭 알아야 할 아키텍처"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/05.MVVM_CleanArchitecture01","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/05.mvvm_cleanarchitecture01"},"doc://JunnosBlog/documentation/JunnosBlog/32.Regex01":{"role":"article","title":"🍎 Swift - Regex.01","abstract":[{"type":"text","text":"아는 사람들은 잘 써먹는 그것."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/32.Regex01","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/32.regex01"},"doc://JunnosBlog/documentation/JunnosBlog/11.Bounds&Frame":{"role":"article","title":"🍎 Swift - Bounds vs Frame","abstract":[{"type":"text","text":"View의 크기와 몸집"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/11.Bounds&Frame","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/11.bounds&frame"},"doc://JunnosBlog/documentation/JunnosBlog/03.Closure03":{"role":"article","title":"🍎 Swift - 클로저(Closure).03","abstract":[{"type":"codeVoice","code":"@escaping"},{"type":"text","text":" 클로저에 대해 알아봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/03.Closure03","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/03.closure03"},"doc://JunnosBlog/documentation/JunnosBlog":{"role":"collection","title":"아요에스위프트","abstract":[],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog","kind":"symbol","type":"topic","url":"\/documentation\/junnosblog"},"doc://JunnosBlog/documentation/JunnosBlog/SwiftCategory":{"images":[{"type":"card","identifier":"Swift.png"}],"role":"collectionGroup","title":"Swift","abstract":[{"type":"text","text":"This is Swift."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/SwiftCategory","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/swiftcategory"},"doc://JunnosBlog/documentation/JunnosBlog/12.ScrollViewUsingAutoLayout":{"role":"article","title":"🍎 Swift - ScrollView 오토 레이아웃으로 구현하기","abstract":[{"type":"text","text":"ScrollView 오토레이아웃을 StoryBoard에서 잡아보자!"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/12.ScrollViewUsingAutoLayout","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/12.scrollviewusingautolayout"},"doc://JunnosBlog/documentation/JunnosBlog/14.ReactorKit":{"role":"article","title":"🍎 Swift - ReactorKit","abstract":[{"type":"text","text":"협업을 위한 ViewModel 솔루션: ReactorKit"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/14.ReactorKit","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/14.reactorkit"},"doc://JunnosBlog/documentation/JunnosBlog/07.Coordinator":{"role":"article","title":"🍎 Swift - Coordinator 패턴","abstract":[{"type":"text","text":"Navigation 해결사 등장"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/07.Coordinator","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/07.coordinator"},"doc://JunnosBlog/documentation/JunnosBlog/08.ARC":{"role":"article","title":"🍎 Swift - ARC(strong, weak, unowned)","abstract":[{"type":"text","text":"쎈 애랑 약한 애랑 없는 애"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/08.ARC","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/08.arc"},"doc://JunnosBlog/documentation/JunnosBlog/01.Closure01":{"role":"article","title":"🍎 Swift - 클로저(Closure).01","abstract":[{"type":"text","text":"팔방미인 클로저에 대해 알아봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/01.Closure01","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/01.closure01"},"doc://JunnosBlog/documentation/JunnosBlog/13.RxWithoutRx":{"role":"article","title":"🍎 Swift - Rx 없이 Reactive Binding 해보기","abstract":[{"type":"text","text":"Rx없이 Rx와 같은 기능을 구현해볼까요?"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/13.RxWithoutRx","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/13.rxwithoutrx"},"Swift.png":{"alt":"Swift","type":"image","identifier":"Swift.png","variants":[{"url":"\/images\/Swift.png","traits":["1x","light"]}]},"doc://JunnosBlog/documentation/JunnosBlog/06.MVVM_CleanArchitecture02":{"role":"article","title":"🍎 Swift - MVVM, Clean Architecture.02","abstract":[{"type":"text","text":"두 아키텍처를 결합해봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/06.MVVM_CleanArchitecture02","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/06.mvvm_cleanarchitecture02"},"doc://JunnosBlog/documentation/JunnosBlog/16.PropertyWrapper":{"role":"article","title":"🍎 Swift - Property Wrapper","abstract":[{"type":"text","text":"안전하고 간편한 새로운 Photo Picker!"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/16.PropertyWrapper","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/16.propertywrapper"},"https://developer.apple.com/documentation/swift/choosing-between-structures-and-classes":{"title":"Choosing between Structures and Classes","titleInlineContent":[{"type":"text","text":"Choosing between Structures and Classes"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/choosing-between-structures-and-classes","url":"https:\/\/developer.apple.com\/documentation\/swift\/choosing-between-structures-and-classes"}}}