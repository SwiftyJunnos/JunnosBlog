{"primaryContentSections":[{"kind":"content","content":[{"anchor":"","level":2,"type":"heading","text":""},{"type":"paragraph","inlineContent":[{"type":"text","text":"RxSwift를 다루게 되다 보니 불가항력적으로 눈에 계속 보이는 MVVM 구조라는 놈이 있습니다. View Controller의 역할이 너무 무거워지고 있던 것을 체감하던 중이여서 프로젝트가 더 진행되기 전에 MVVM 구조를 적용해보기로 했습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"원래는 AWS 서비스들을 사용해보고자 시작했던 프로젝트인데 하다보니 이것저것 많이 건들여보게 되네요 🧐"}]},{"anchor":"MVVM","level":2,"type":"heading","text":"MVVM"},{"type":"paragraph","inlineContent":[{"type":"text","text":"MVVM 구조는 사실 굳이 RxSwift가 아니여도 iOS 앱개발을 공부하다보면 자주 마주치게 되는 용어입니다. MVVM은 "},{"type":"strong","inlineContent":[{"type":"text","text":"Model"}]},{"type":"text","text":", "},{"type":"strong","inlineContent":[{"type":"text","text":"View"}]},{"type":"text","text":", "},{"type":"strong","inlineContent":[{"type":"text","text":"View Model"}]},{"type":"text","text":"로 코드를 구분하는 구조입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"그런데 기존의 MVC 구조에서 뭔가가 불편했으니까 이런 새로운 구조를 적용하는 것이겠죠? MVC 구조는 이해하기 상당히 쉽고 애플도 XCode의 기본 구조를 MVC로 설정해둔 듯 합니다. 기본으로 설정된 파일의 이름조차 View Controller이기 때문이죠. 하지만 MVC 구조는 View Controller에게 거의 모든 것을 맡깁니다. 아무리 class를 분리하더라도 결국에는 View Controller에서 참조하여 사용하게 되죠."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"MVVM 구조는 View Controller가 독박쓰던 구조를 세가지 구조로 나눕니다."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"MVVMPattern"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"View & View Controller:"}]},{"type":"text","text":" 화면을 구성하는 것을 담당합니다."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"View Model:"}]},{"type":"text","text":" 화면으로 전달되는 정보들과 그에 필요한 기능들을 담당합니다."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Model:"}]},{"type":"text","text":" 실질적인 데이터들의 저장을 담당합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"View Model은 Model의 데이터들을 계속해서 Update해주고, View Controller에는 화면에 출력할 정보를 뿌려줍니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"View Controller는 View를 구성해서 화면을 구성합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이렇게 해서 얻는 이점이 뭐냐?! 하시면"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이제 View Controller와 View에는 오직 화면 구성 코드만이 남겨지게 됩니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"그리고 실질적인 동작 코드들은 전부 View Model에 들어가게 됨으로서 UI에 대한 접근 없이도 이런저런 테스트나 기능 수정등을 할 수 있게 됩니다. 정돈된 파일은 덤이고요!"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"하지만 그렇다고 MVVM 구조가 만능인 것은 아닙니다.."}]},{"anchor":"고통받는-View-Model","level":3,"type":"heading","text":"고통받는 View Model"},{"type":"paragraph","inlineContent":[{"type":"text","text":"View Controller는 이제 무게를 좀 덜 수 있게 되었습니다. 하지만 모든 업무를 떠안게 된 View Model… 사실상 무겁고 계속해서 추가가 되는 코드들은 이 View Model이 전부 맡게 되었습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"그래서 Clean-Architecture로 View Model의 기능들도 쪼개봅시다!"}]},{"anchor":"Clean-Architecture","level":2,"type":"heading","text":"Clean Architecture"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"CleanArchitecture"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이 그래프 하나로 모든 것을 설명할 수 있습니다."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"종속성은 안쪽으로만 향할 수 있다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"안쪽의 요소는 바깥쪽 요소에 대해 아무것도 알 수 없다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"바깥쪽에서 사용된 이름들은 안쪽에서 사용할 수 없다. (변수, 함수, 클래스 등)"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"사실 세가지 모두 동일한 말을 하고 있습니다. 바깥쪽 요소들은 어떤 일이 있어도 절대로 안쪽 요소들로부터의 영향을 받지 않도록 한다는 것이죠."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"자 이제 각 단계별로 어떤 요소들이 있는지 알아보겠습니다."}]},{"anchor":"Entities-Model","level":3,"type":"heading","text":"Entities (Model)"},{"type":"paragraph","inlineContent":[{"type":"text","text":"이 안에 있는 요소들의 특징은 거의 변경될 일이 없다는 점입니다. 예를 들면 DB의 구조..같은 것이 있겠죠? 그래서 MVC 모델에서 Model로 쓰던 데이터의 구조 파일 등이 여기에 속합니다."}]},{"type":"codeListing","syntax":"swift","code":["struct Film {","  let id: Int","  let name: String","  let plot: String?","  let image: String?","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"위와 같이 Film이라는 데이터 구조는 완전히 새로운 데이터 구조를 추가\/수정할 것이 아니라면 거의 건드릴 일이 없는 코드입니다. 영화 정보앱의 기능이 아무리 바뀌더라도 영화 정보를 사용하지 않을 일은 없겠죠?"}]},{"anchor":"Use-Cases","level":3,"type":"heading","text":"Use Cases"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use Cases란 사용자가 직접 “사용”하는 앱의 동작과 시나리오들이라고 말할 수 있습니다. 이런 구조를 처음 보는 저에게는 가장 이해하기 힘들었던 부분입니다. 이번에도 쉽게 위의 예시를 통해 살펴보겠습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"영화 정보앱을 켜고 사용자는 어떤 행동을 할까요? 검색을 하던, 추천 정보를 보던 영화 정보를 보여주기 위한 일종의 버튼을 클릭하겠죠? 이 시나리오가 바로 Use Case입니다."}]},{"type":"codeListing","syntax":"swift","code":["var isLoginAccepted = BehaviorSubject(value: false)","func loadFilmInfo() {}","func updateFilmInfo() {}","func notifyReceived() {}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"보통 위와 같이 표현됩니다. 유저의 행동, 상태의 변화 등으로 인해 어떤 출력값의 변화가 필요할 때 Use Cases가 출동하여 해결해준다 고 볼 수 있습니다."}]},{"anchor":"Interface-Adapters","level":3,"type":"heading","text":"Interface Adapters"},{"type":"paragraph","inlineContent":[{"type":"text","text":"이 부분은 "},{"type":"strong","inlineContent":[{"type":"text","text":"Presentation Layer"}]},{"type":"text","text":"라고 부르는 사람들도 많습니다. 어느쪽이던 이름에서 화면의 구성과 관련이 있을 것 같다는 느낌이 들죠?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"MVVM 모델의 View Model이 보통 이 구역에 해당됩니다. Clean Architecture를 적용한 MVVM 구조에서 View Model은 오직 화면에 출력될 데이터를 최종적으로 가공하는 역할만 하기 때문입니다."}]},{"type":"codeListing","syntax":"swift","code":["func setTimestampFormat() {}","func setFilmGradeFormat() {}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"그래서 보통 위와 같이 Use Cases의 output으로 얻은 정보를 사용자가 보기 쉽게 가공하는 방식으로 많이 사용됩니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"20220323 ➡️ 2022년 3월 23일"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"처럼요."}]},{"anchor":"Frameworkds--Drivers","level":3,"type":"heading","text":"Frameworkds & Drivers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"이 부분은 최외곽인 만큼 가장 활발하게 변형이 이루어집니다. 사용자가 직접적으로 상호작용하는 UI나 DB 외에도 Framework등도 여기에 포함됩니다."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/junnosblog\/05.mvvm_cleanarchitecture01"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/05.MVVM_CleanArchitecture01","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"iOS 개발자라면 꼭 알아야 할 아키텍처"}],"kind":"article","metadata":{"roleHeading":"Article","color":{"standardColorIdentifier":"orange"},"title":"🍎 Swift - MVVM, Clean Architecture.01","role":"article","modules":[{"name":"아요에스위프트"}]},"hierarchy":{"paths":[["doc:\/\/JunnosBlog\/documentation\/JunnosBlog","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/SwiftCategory"]]},"seeAlsoSections":[{"title":"Posts","identifiers":["doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/06.MVVM_CleanArchitecture02","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/04.RxSwift","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/03.Closure03","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/02.Closure02","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/01.Closure01"],"generated":true}],"references":{"doc://JunnosBlog/documentation/JunnosBlog/04.RxSwift":{"role":"article","title":"🍎 Swift - RxSwift","abstract":[{"type":"text","text":"Reactive한 Swift의 시작"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/04.RxSwift","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/04.rxswift"},"doc://JunnosBlog/documentation/JunnosBlog/06.MVVM_CleanArchitecture02":{"role":"article","title":"🍎 Swift - MVVM, Clean Architecture.02","abstract":[{"type":"text","text":"두 아키텍처를 결합해봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/06.MVVM_CleanArchitecture02","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/06.mvvm_cleanarchitecture02"},"doc://JunnosBlog/documentation/JunnosBlog/SwiftCategory":{"images":[{"type":"card","identifier":"Swift.png"}],"role":"article","title":"Swift","abstract":[{"type":"text","text":"This is Swift."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/SwiftCategory","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/swiftcategory"},"Swift.png":{"alt":"Swift","type":"image","identifier":"Swift.png","variants":[{"url":"\/images\/Swift.png","traits":["1x","light"]}]},"MVVMPattern":{"alt":"MVVM Pattern","type":"image","identifier":"MVVMPattern","variants":[{"url":"\/images\/MVVMPattern.png","traits":["1x","light"]}]},"doc://JunnosBlog/documentation/JunnosBlog/03.Closure03":{"role":"article","title":"🍎 Swift - 클로저(Closure).03","abstract":[{"type":"codeVoice","code":"@escaping"},{"type":"text","text":" 클로저에 대해 알아봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/03.Closure03","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/03.closure03"},"doc://JunnosBlog/documentation/JunnosBlog":{"role":"collection","title":"아요에스위프트","abstract":[],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog","kind":"symbol","type":"topic","url":"\/documentation\/junnosblog"},"doc://JunnosBlog/documentation/JunnosBlog/02.Closure02":{"role":"article","title":"🍎 Swift - 클로저(Closure).02","abstract":[{"type":"text","text":"Trailing 클로저에 대해 알아봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/02.Closure02","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/02.closure02"},"doc://JunnosBlog/documentation/JunnosBlog/01.Closure01":{"role":"article","title":"🍎 Swift - 클로저(Closure).01","abstract":[{"type":"text","text":"팔방미인 클로저에 대해 알아봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/01.Closure01","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/01.closure01"},"CleanArchitecture":{"alt":"Clean Architecture","type":"image","identifier":"CleanArchitecture","variants":[{"url":"\/images\/CleanArchitecture.png","traits":["1x","light"]}]}}}