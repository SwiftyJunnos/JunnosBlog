{"primaryContentSections":[{"kind":"content","content":[{"anchor":"","level":2,"type":"heading","text":""},{"type":"paragraph","inlineContent":[{"type":"text","text":"오늘은 모두가 쓰지만 저만 안쓰고 있던 RxSwift가 무엇이고, 어떻게 쓰는건지 알아보겠습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"우선 RxSwift는 Swift만 갖고 있는 라이브러리는 아닙니다. 원래의 프로젝트 명은 ReactiveX이고 이 이름으로는 어디선가 들어봤던 것 같기도 하죠. RxSwift는 이 ReactiveX를 Swift에 이식한 버전의 이름입니다."}]},{"anchor":"Reactive-X","level":2,"type":"heading","text":"Reactive X"},{"type":"paragraph","inlineContent":[{"type":"text","text":"그렇다면 "},{"type":"strong","inlineContent":[{"type":"text","text":"ReactiveX"}]},{"type":"text","text":"는 무엇일까요?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"보통 우리가 짜는 코드는 "},{"type":"strong","inlineContent":[{"type":"text","text":"동기적(Synchronous)"}]},{"type":"text","text":" 으로 실행됩니다. 우리가 적은 윗 줄부터 아래 줄까지 순서대로 "},{"type":"strong","inlineContent":[{"type":"text","text":"한 번에 한 줄씩 차근차근"}]},{"type":"text","text":" 실행되죠. 하지만 "},{"type":"strong","inlineContent":[{"type":"text","text":"ReactiveX"}]},{"type":"text","text":"에서는 작업들을 우선 "},{"type":"strong","inlineContent":[{"type":"text","text":"병렬(parallel)적으로 실행"}]},{"type":"text","text":" 하고, "},{"type":"strong","inlineContent":[{"type":"text","text":"”observers”"}]},{"type":"text","text":" 라는 놈들로 나중에 결과물을 받아옵니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"ReactiveX에서 작업은 아래 구조로 실행됩니다."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Observable ⬅️ Subscribe ◀️ Observer"}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Observable에서 어떤 행동이 포착되면 Observer는 그에 맞는 반응을 보내줍니다."}]},{"anchor":"Observable","level":2,"type":"heading","text":"Observable"},{"anchor":"Observable-발행","level":3,"type":"heading","text":"Observable 발행"},{"type":"paragraph","inlineContent":[{"type":"text","text":"비동기성(Asynchronous) 모델의 흐름은 아래와 같습니다."}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"비동기성 호출의 return 값을 활용하여 method를 정의한다: "},{"type":"strong","inlineContent":[{"type":"text","text":"Observer"}]},{"type":"text","text":"의 일부분"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"비동기성 호출을 정의한다: "},{"type":"strong","inlineContent":[{"type":"text","text":"Observable"}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Observer"}]},{"type":"text","text":"를 "},{"type":"strong","inlineContent":[{"type":"text","text":"Observable"}]},{"type":"text","text":"에 연결한다: "},{"type":"strong","inlineContent":[{"type":"text","text":"Subscribe"}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"return value와 value를 활용한다."}]}]}]},{"type":"codeListing","syntax":"java","code":["def myOnNext = { it -> do something useful with it };","def myObservable = someObservable(itsParameters);","myObservable.subscribe(myOnNext);"]},{"anchor":"onNext-onCompleted-onError","level":3,"type":"heading","text":"onNext, onCompleted, onError"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Subscribe된 Observer는 상황에 따라 subset을 가집니다."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"onNext"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Observable이 어떤 정보를 내보내면, "},{"type":"codeVoice","code":"onNext"},{"type":"text","text":" method의 인자로 받아옵니다."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"onError"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"예상한 데이터를 생성하는 데 "},{"type":"strong","inlineContent":[{"type":"text","text":"실패"}]},{"type":"text","text":"하거나 "},{"type":"strong","inlineContent":[{"type":"text","text":"에러"}]},{"type":"text","text":"가 발생하면 "},{"type":"codeVoice","code":"onError"},{"type":"text","text":" method를 호출합니다. onError method를 호출한 이후에는 "},{"type":"codeVoice","code":"onNext"},{"type":"text","text":", "},{"type":"codeVoice","code":"onCompleted"},{"type":"text","text":" method를 호출하지 않습니다. "},{"type":"codeVoice","code":"onError"},{"type":"text","text":" method의 인자로는 무엇이 에러를 일으켰는지 받아옵니다."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"onCompleted"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"에러가 발생하지 않았을 때, 마지막 "},{"type":"codeVoice","code":"onNext"},{"type":"text","text":" method를 호출한 후에 호출됩니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"정리해보면, "},{"type":"codeVoice","code":"onNext"},{"type":"text","text":"는 여러번 발생할 수도 있지만 "},{"type":"codeVoice","code":"onError"},{"type":"text","text":"와 "},{"type":"codeVoice","code":"onCompleted"},{"type":"text","text":"는 좋든 싫든 한 번만 발생하게 됩니다!"}]},{"type":"codeListing","syntax":"java","code":["def myOnNext     = { item -> \/* do something userful with item *\/ };","def myError      = { throwable -> \/* react sensibly to a failed call *\/ };","def myComplete   = { \/* clean up after the final response *\/ };","def myObservable = someMethod(itsParameters);","myObservable.subscribe(myOnNext, myError, myComplete);"]},{"anchor":"Unsubscribing","level":3,"type":"heading","text":"Unsubscribing"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Observable"},{"type":"text","text":"이 더 이상 모니터링이 필요 없어질 경우, "},{"type":"codeVoice","code":"subscribe"},{"type":"text","text":"를 해제할 수도 있습니다."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Observable"},{"type":"text","text":"이 unsubscribe 되면, 새로운 방출값을 생성하는 것을 멈출 수도 있습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"그런데 주의할 점은, 이 과정은 약간의 딜레이가 발생할 수 있기 때문에 방출값이 조금 더 생성된 후에 멈출 수도 있습니다."}]},{"anchor":"Hot--Cold-Observables","level":3,"type":"heading","text":"Hot & Cold Observables"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Hot Observable"}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"생성됨과 동시에 방출값이 생성"}]},{"type":"text","text":"됩니다. Subscribe하는 Observer는 중간값부터 값을 받아가게 됩니다."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Cold Observable"}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Subscribe 되면, 그때부터 방출값이 발생"}]},{"type":"text","text":"합니다. 때문에 Subscribe하는 Observer는 생성된 모든 값을 받아갈 수 있습니다."}]},{"anchor":"Operators","level":2,"type":"heading","text":"Operators"},{"anchor":"Chaining-Operators","level":3,"type":"heading","text":"Chaining Operators"},{"type":"paragraph","inlineContent":[{"type":"text","text":"거의 대부분의 operator들은 Observable 안에서 작동하고, Observable을 반환하기 때문에 서로가 서로에게 연결되어 일종의 "},{"type":"strong","inlineContent":[{"type":"text","text":"체인"}]},{"type":"text","text":"을 만들 수 있습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이때 Operator들 간의 chain은 독립적으로 시행되지 않습니다. 연결된 순서에 따라 "},{"type":"strong","inlineContent":[{"type":"text","text":"순서대로 하나씩 시행"}]},{"type":"text","text":"되게 됩니다."}]},{"anchor":"Operators-by-Category","level":3,"type":"heading","text":"Operators by Category"},{"type":"paragraph","inlineContent":[{"type":"text","text":"공식 문서를 보면 각 operator의 기능을 카테고리화 하여 분류해두었는데, 이를 한 번씩 살펴보며 정리해보겠습니다!"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Creating Observables"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"codeVoice","code":"create"}]}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Observable을 생성할 수 있습니다."}]},{"type":"codeListing","syntax":"swift","code":["let source: Observable = Observable.create { observer in","  for i in 1...5 {","    observer.on(.next(i))","  }","  observer.on(.completed)","","  return Disposables.create {","    print(\"disposed\")","  }","}"]},{"type":"codeListing","syntax":"bash","code":["next(1)","next(2)","next(3)","next(4)","next(5)","completed","disposed"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"codeVoice","code":"just"}]}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"간단하게 어떤 하나의 값을 Observable로 만들고 싶을 때 사용합니다."}]},{"type":"codeListing","syntax":"swift","code":["let source = Observable.just(1, 2, 3)","let source2 = Observable.just([1,2,3])"]},{"type":"codeListing","syntax":"bash","code":["1, 2, 3","[1, 2, 3]"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"codeVoice","code":"from"}]}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"여러개의 값이 있고 각각을 Observable로 만들고 싶을 때 사용합니다."}]},{"type":"codeListing","syntax":"swift","code":["let numbers = [1,2,3,4,5]","let source = Observable.from(numbers)"]},{"type":"codeListing","syntax":"bash","code":["1","2","3","4","5"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"codeVoice","code":"of"}]}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"여러개의 값을 Observable로 만들고 싶을 때 사용합니다."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"from"},{"type":"text","text":"과 "},{"type":"codeVoice","code":"just"},{"type":"text","text":"의 중간 정도로 생각하면 됩니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"배열을 사용했을 때는 배열 그대로 방출하고, 아닐때는 각각의 값을 하나씩 방출합니다."}]},{"type":"codeListing","syntax":"swift","code":["let source = Observable.of(1, 2, 3)","let source2 = Observable.of([1, 2, 3])"]},{"type":"codeListing","syntax":"bash","code":["1","2","3","1, 2, 3"]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Transforming Observables"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"codeVoice","code":"map"}]}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"각각의 값을 원하는 형태로 변환하여 Observable로 만들고 싶을 때 사용합니다."}]},{"type":"codeListing","syntax":"swift","code":["let source = Observable.from([1, 2, 3]).map { $0 * 2 }"]},{"type":"codeListing","syntax":"bash","code":["2","4","6"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"codeVoice","code":"flatMap"}]}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"각각의 Observable이 방출한 값에 대해 지정한 함수를 적용합니다. 이 떄, 각 함수는 자체적으로 값을 방출하는 Observalbe을 반환합니다."}]},{"type":"codeListing","syntax":"swift","code":["let observableInt = Observable.of(1, 2, 3)","let observableString = Observable.of(\"A\", \"B\", \"C\")","","observableInt","  .flatMap { (x: Int) -> Observable<String> in","    return observableString","  }"]},{"type":"codeListing","syntax":"bash","code":["next(A)","next(B)","next(A)","next(C)","next(B)","next(A)","next(C)","next(B)","next(C)","completed"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"codeVoice","code":"scan"}]}]}]}]},{"type":"codeListing","syntax":"swift","code":["let observable = Observable.of(1, 2, 3).scan(0) { $0 + $1 }"]},{"type":"codeListing","syntax":"bash","code":["1","3","6"]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Filtering Observables"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"codeVoice","code":"filter"}]}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"결과를 원하는 조건에 맞게 필터링하여 방출합니다."}]},{"type":"codeListing","syntax":"swift","code":["let observable = Observable.from([1, 2, 3]).filter { $0 > 1 }"]},{"type":"codeListing","syntax":"bash","code":["2","3"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"codeVoice","code":"first"},{"type":"text","text":", "},{"type":"codeVoice","code":"last"}]}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"결과 중 가장 첫번째\/마지막을 방출합니다."}]},{"type":"codeListing","syntax":"swift","code":["let observable = Observable.from([1, 2, 3]).first"]},{"type":"codeListing","syntax":"bash","code":["Optional(1)"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"codeVoice","code":"take"},{"type":"text","text":", "},{"type":"codeVoice","code":"takeLast"}]}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"결과 중 마지막\/처음부터 n번째까지 방출할지 정해서 방출합니다."}]},{"type":"codeListing","syntax":"swift","code":["let observable = Observable.from([1, 2, 3]).takeLast(2)"]},{"type":"codeListing","syntax":"bash","code":["2","3"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"codeVoice","code":"elementAt"}]}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"n번째 인덱스의 결과를 방출합니다."}]},{"type":"codeListing","syntax":"swift","code":["let observable = Observable.from([1, 2, 3]).elementAt(2)"]},{"type":"codeListing","syntax":"bash","code":["3"]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Combining Observables"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"codeVoice","code":"merge"}]}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"여러 Observable의 결과를 하나의 Observable로 합하여 반환합니다. 이 때, 하나의 Observable이라도 에러가 발생하면, 합쳐진 Observable도 종료됩니다."}]},{"type":"codeListing","syntax":"swift","code":["let observableInt = Observable.of(1, 2, 3)","let observableInt2 = Observable.of(4, 5, 6)","let observableMerge = Observable.of(observableInt, observableInt2).merge()"]},{"type":"codeListing","syntax":"bash","code":["1","2","4","3","5","6"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"codeVoice","code":"zip"}]}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"각 Observable의 순서대로 짝을 맞추어 연산 결과를 방출합니다. 짝이 맞지 않는 값은 버립니다."}]},{"type":"codeListing","syntax":"swift","code":["let observableInt = Observable.of(1, 2, 3, 4)","let observableString = Observable.of(\"A\", \"B\", \"C\")","let observableZip = Observable.zip(observableInt, observableString) {","  \"\\($0)\" + $1","}"]},{"type":"codeListing","syntax":"bash","code":["1A","2B","3C"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"codeVoice","code":"combineLatest"}]}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"각 Observable의 마지막 값끼리의 연산 결과를 방출합니다."}]},{"type":"codeListing","syntax":"swift","code":["let observableInt = Observable.of(1, 2, 3)","let observableString = Observable.of(\"A\", \"B\", \"C\")","let observableCombineLatest = Observable.combineLatest(observableInt, observableString) {","  \"\\($0)\" + $1","}"]},{"type":"codeListing","syntax":"bash","code":["1A","1B","2B","3B","3C"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/junnosblog\/04.rxswift"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/04.RxSwift","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Reactive한 Swift의 시작"}],"kind":"article","metadata":{"roleHeading":"Article","color":{"standardColorIdentifier":"orange"},"title":"🍎 Swift - RxSwift","role":"article","modules":[{"name":"아요에스위프트"}]},"hierarchy":{"paths":[["doc:\/\/JunnosBlog\/documentation\/JunnosBlog","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/SwiftCategory"]]},"seeAlsoSections":[{"title":"Posts","identifiers":["doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/10.ViewControllerLifeCycle","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/09.StructClass","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/08.ARC","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/07.Coordinator","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/06.MVVM_CleanArchitecture02","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/05.MVVM_CleanArchitecture01","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/03.Closure03","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/02.Closure02","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/01.Closure01"],"generated":true}],"references":{"doc://JunnosBlog/documentation/JunnosBlog/08.ARC":{"role":"article","title":"🍎 Swift - ARC(strong, weak, unowned)","abstract":[{"type":"text","text":"쎈 애랑 약한 애랑 없는 애"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/08.ARC","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/08.arc"},"doc://JunnosBlog/documentation/JunnosBlog/SwiftCategory":{"images":[{"type":"card","identifier":"Swift.png"}],"role":"article","title":"Swift","abstract":[{"type":"text","text":"This is Swift."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/SwiftCategory","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/swiftcategory"},"doc://JunnosBlog/documentation/JunnosBlog/10.ViewControllerLifeCycle":{"role":"article","title":"🍎 Swift - View Controller의 Life Cycle","abstract":[{"type":"text","text":"View Controller의 삶과 죽음"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/10.ViewControllerLifeCycle","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/10.viewcontrollerlifecycle"},"doc://JunnosBlog/documentation/JunnosBlog/07.Coordinator":{"role":"article","title":"🍎 Swift - Coordinator 패턴","abstract":[{"type":"text","text":"Navigation 해결사 등장"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/07.Coordinator","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/07.coordinator"},"doc://JunnosBlog/documentation/JunnosBlog/06.MVVM_CleanArchitecture02":{"role":"article","title":"🍎 Swift - MVVM, Clean Architecture.02","abstract":[{"type":"text","text":"두 아키텍처를 결합해봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/06.MVVM_CleanArchitecture02","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/06.mvvm_cleanarchitecture02"},"doc://JunnosBlog/documentation/JunnosBlog/01.Closure01":{"role":"article","title":"🍎 Swift - 클로저(Closure).01","abstract":[{"type":"text","text":"팔방미인 클로저에 대해 알아봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/01.Closure01","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/01.closure01"},"doc://JunnosBlog/documentation/JunnosBlog/02.Closure02":{"role":"article","title":"🍎 Swift - 클로저(Closure).02","abstract":[{"type":"text","text":"Trailing 클로저에 대해 알아봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/02.Closure02","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/02.closure02"},"doc://JunnosBlog/documentation/JunnosBlog/05.MVVM_CleanArchitecture01":{"role":"article","title":"🍎 Swift - MVVM, Clean Architecture.01","abstract":[{"type":"text","text":"iOS 개발자라면 꼭 알아야 할 아키텍처"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/05.MVVM_CleanArchitecture01","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/05.mvvm_cleanarchitecture01"},"doc://JunnosBlog/documentation/JunnosBlog/09.StructClass":{"role":"article","title":"🍎 Swift - Struct vs Class","abstract":[{"type":"text","text":"구조체와 클래스"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/09.StructClass","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/09.structclass"},"doc://JunnosBlog/documentation/JunnosBlog/03.Closure03":{"role":"article","title":"🍎 Swift - 클로저(Closure).03","abstract":[{"type":"codeVoice","code":"@escaping"},{"type":"text","text":" 클로저에 대해 알아봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/03.Closure03","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/03.closure03"},"doc://JunnosBlog/documentation/JunnosBlog":{"role":"collection","title":"아요에스위프트","abstract":[],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog","kind":"symbol","type":"topic","url":"\/documentation\/junnosblog"},"Swift.png":{"alt":"Swift","type":"image","identifier":"Swift.png","variants":[{"url":"\/images\/Swift.png","traits":["1x","light"]}]}}}