{"primaryContentSections":[{"kind":"content","content":[{"anchor":"","level":2,"type":"heading","text":""},{"type":"paragraph","inlineContent":[{"type":"text","text":"오늘은 면접을 볼 일이 하나 있었는데요.. 대답을 제대로 못해서 끝나자마자 황급하게 공부하려고 작성해둔 목록들을 열어보았습니다. 전부 다 있더라고요.. ㅎㅎ;;"},{"type":"text","text":" "},{"type":"text","text":"공부를 좀 더 열심히 했으면 답 할 수 있었을텐데 아쉽네요.."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"그래서 오늘은 그 중에 하나였던 "},{"type":"strong","inlineContent":[{"type":"text","text":"View Controller의 Life Cycle"}]},{"type":"text","text":"에 대해서 알아보려고 합니다."}]},{"anchor":"View-Controller의-Life-Cycle","level":2,"type":"heading","text":"View Controller의 Life Cycle"},{"type":"paragraph","inlineContent":[{"type":"text","text":"View Controller도 다른 모든 객체들처럼 "},{"type":"codeVoice","code":"init"},{"type":"text","text":"과 "},{"type":"codeVoice","code":"deinit"},{"type":"text","text":" 과정을 거쳐야합니다. 그리고 Life Cycle에 해당되는 내용 중 어떤 것은 저희에게 아주아주 익숙한 모습이죠."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"View Controller 파일을 처음 만들면 보통 아래와 같이 코드가 자동으로 입력되어 있습니다. 너무 익숙한 친구죠?"}]},{"type":"codeListing","syntax":"swift","code":["import UIKit","","class HomeViewController: UIViewController {","  override func viewDidLoad() {","    super.viewDidLoad()","    \/\/ Do any additional setup after loading the view, typically from a nib.","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"말 그대로 View가 Load 될 때 실행되는 코드인데요, View Controller의 Life Cycle에는 이 "},{"type":"codeVoice","code":"viewDidLoad"},{"type":"text","text":"외에도 많은 함수들이 있습니다."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"VCLifeCycle"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이해하기 쉽게 메소드들의 이름들이 직관적으로 명명되어 있는 걸 볼 수 있네요. 그럼 하나하나 살펴봅시다. 별 거 없답니다!"}]},{"anchor":"viewDidLoad","level":3,"type":"heading","text":"viewDidLoad"},{"type":"paragraph","inlineContent":[{"type":"text","text":"가장 익숙한 친구부터 알아봅시다. 애플의 설명에 따르면 "},{"type":"codeVoice","code":"viewDidLoad"},{"type":"text","text":"는"}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Controller의 View가 메모리에 로드된 후에 호출됩니다."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"라고 합니다. View를 표현하려면 우선 로드해야하고, 메모리에 리소스를 올려주어야 하겠죠. 해당 과정이 모두 끝난 후에 자동으로 호출되는 메소드가 바로 "},{"type":"codeVoice","code":"viewDidLoad"},{"type":"text","text":"인 것입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"그래서 보통 "},{"type":"codeVoice","code":"viewDidLoad"},{"type":"text","text":"에서는 화면에 필요한 데이터들을 로드하거나 View가 로드된 후 딱 한 번만 실행해야 하는 코드가 있을 경우 이 곳에서 호출하면 됩니다."}]},{"anchor":"viewWillAppear","level":3,"type":"heading","text":"viewWillAppear"},{"type":"paragraph","inlineContent":[{"type":"text","text":"View가 로드된 후에는 어떤 일이 일어날까요?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"바로 "},{"type":"codeVoice","code":"viewWillAppear"},{"type":"text","text":"가 호출됩니다. View가 화면에 띄워지기 직전에 호출되는 메소드인데요, "},{"type":"codeVoice","code":"viewDidLoad"},{"type":"text","text":"와 호출 시점이 굉장히 유사해보입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"하지만 Appear와 Load라는 명확하게 다른 시점을 갖고 있는 만큼 아주 큰 차이가 있습니다. "},{"type":"codeVoice","code":"viewDidLoad"},{"type":"text","text":"는 View가 로드된 후 딱 한 번만 호출되기 때문에, 여러 View를 로드하고 서로를 오갈때는 호출되지 않습니다."},{"type":"text","text":" "},{"type":"text","text":"반면 "},{"type":"codeVoice","code":"viewWillAppear"},{"type":"text","text":"는 여러 View를 오갈 때도 어쨋던 화면에 띄워지는 것이기 때문에 호출됩니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"따라서 View가 화면에 뜰 때마다 수행되어야 하는 기능이 있다면 "},{"type":"codeVoice","code":"viewWillAppear"},{"type":"text","text":"에 구현해주면 됩니다!"}]},{"anchor":"viewDidAppear","level":3,"type":"heading","text":"viewDidAppear"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"viewDidAppear"},{"type":"text","text":"는 말 그대로 View가 화면에 띄워진 직후에 호출됩니다. View가 화면에 띄워질 때마다 수행되어야 할 후처리 기능이 있다면 바로 여기에 구현해주면 됩니다."}]},{"anchor":"viewWillDisappear--viewDidDisappear","level":3,"type":"heading","text":"viewWillDisappear \/ viewDidDisappear"},{"type":"paragraph","inlineContent":[{"type":"text","text":"사실 위의 "},{"type":"codeVoice","code":"viewWillAppear"},{"type":"text","text":"와 "},{"type":"codeVoice","code":"viewDidAppear"},{"type":"text","text":" 메소드를 이해하셨다면, 이 두 메소드는 뽀너스입니다. View가 사라질 때마다 동일한 방식으로 호출되는 메소드이기 때문이죠."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Reference"}]},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/zeddios.tistory.com\/43"}]},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/uikit\/uiviewcontroller"}]}],"type":"aside","name":"Note"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/junnosblog\/10.viewcontrollerlifecycle"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/10.ViewControllerLifeCycle","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"View Controller의 삶과 죽음"}],"kind":"article","metadata":{"roleHeading":"Article","title":"🍎 Swift - View Controller의 Life Cycle","role":"article","modules":[{"name":"아요에스위프트"}]},"hierarchy":{"paths":[["doc:\/\/JunnosBlog\/documentation\/JunnosBlog","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/SwiftCategory"]]},"seeAlsoSections":[{"title":"Posts","identifiers":["doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/32.Regex01","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/17.DownSampling","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/16.PropertyWrapper","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/15.PHPicker","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/14.ReactorKit","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/13.RxWithoutRx","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/12.ScrollViewUsingAutoLayout","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/11.Bounds&Frame","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/09.StructClass","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/08.ARC","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/07.Coordinator","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/06.MVVM_CleanArchitecture02","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/05.MVVM_CleanArchitecture01","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/04.RxSwift","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/03.Closure03","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/02.Closure02","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/01.Closure01"],"generated":true}],"references":{"VCLifeCycle":{"alt":"View Controller’s Life Cycle","type":"image","identifier":"VCLifeCycle","variants":[{"url":"\/images\/VCLifeCycle.jpeg","traits":["1x","light"]}]},"doc://JunnosBlog/documentation/JunnosBlog/09.StructClass":{"role":"article","title":"🍎 Swift - Struct vs Class","abstract":[{"type":"text","text":"구조체와 클래스"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/09.StructClass","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/09.structclass"},"Swift.png":{"alt":"Swift","type":"image","identifier":"Swift.png","variants":[{"url":"\/images\/Swift.png","traits":["1x","light"]}]},"doc://JunnosBlog/documentation/JunnosBlog/03.Closure03":{"role":"article","title":"🍎 Swift - 클로저(Closure).03","abstract":[{"type":"codeVoice","code":"@escaping"},{"type":"text","text":" 클로저에 대해 알아봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/03.Closure03","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/03.closure03"},"doc://JunnosBlog/documentation/JunnosBlog/02.Closure02":{"role":"article","title":"🍎 Swift - 클로저(Closure).02","abstract":[{"type":"text","text":"Trailing 클로저에 대해 알아봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/02.Closure02","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/02.closure02"},"doc://JunnosBlog/documentation/JunnosBlog/06.MVVM_CleanArchitecture02":{"role":"article","title":"🍎 Swift - MVVM, Clean Architecture.02","abstract":[{"type":"text","text":"두 아키텍처를 결합해봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/06.MVVM_CleanArchitecture02","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/06.mvvm_cleanarchitecture02"},"doc://JunnosBlog/documentation/JunnosBlog/08.ARC":{"role":"article","title":"🍎 Swift - ARC(strong, weak, unowned)","abstract":[{"type":"text","text":"쎈 애랑 약한 애랑 없는 애"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/08.ARC","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/08.arc"},"doc://JunnosBlog/documentation/JunnosBlog/17.DownSampling":{"role":"article","title":"🍎 Swift - 다운샘플링","abstract":[{"type":"text","text":"모바일 환경에서 고해상도 이미지는 쓸 모 없 다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/17.DownSampling","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/17.downsampling"},"https://zeddios.tistory.com/43":{"title":"iOS ) View Controller의 생명주기(Life-Cycle) - ZeddiOS","titleInlineContent":[{"type":"text","text":"iOS ) View Controller의 생명주기(Life-Cycle) - ZeddiOS"}],"type":"link","identifier":"https:\/\/zeddios.tistory.com\/43","url":"https:\/\/zeddios.tistory.com\/43"},"doc://JunnosBlog/documentation/JunnosBlog/16.PropertyWrapper":{"role":"article","title":"🍎 Swift - Property Wrapper","abstract":[{"type":"text","text":"안전하고 간편한 새로운 Photo Picker!"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/16.PropertyWrapper","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/16.propertywrapper"},"doc://JunnosBlog/documentation/JunnosBlog/11.Bounds&Frame":{"role":"article","title":"🍎 Swift - Bounds vs Frame","abstract":[{"type":"text","text":"View의 크기와 몸집"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/11.Bounds&Frame","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/11.bounds&frame"},"doc://JunnosBlog/documentation/JunnosBlog":{"role":"collection","title":"아요에스위프트","abstract":[],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog","kind":"symbol","type":"topic","url":"\/documentation\/junnosblog"},"doc://JunnosBlog/documentation/JunnosBlog/13.RxWithoutRx":{"role":"article","title":"🍎 Swift - Rx 없이 Reactive Binding 해보기","abstract":[{"type":"text","text":"Rx없이 Rx와 같은 기능을 구현해볼까요?"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/13.RxWithoutRx","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/13.rxwithoutrx"},"doc://JunnosBlog/documentation/JunnosBlog/07.Coordinator":{"role":"article","title":"🍎 Swift - Coordinator 패턴","abstract":[{"type":"text","text":"Navigation 해결사 등장"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/07.Coordinator","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/07.coordinator"},"doc://JunnosBlog/documentation/JunnosBlog/01.Closure01":{"role":"article","title":"🍎 Swift - 클로저(Closure).01","abstract":[{"type":"text","text":"팔방미인 클로저에 대해 알아봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/01.Closure01","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/01.closure01"},"doc://JunnosBlog/documentation/JunnosBlog/04.RxSwift":{"role":"article","title":"🍎 Swift - RxSwift","abstract":[{"type":"text","text":"Reactive한 Swift의 시작"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/04.RxSwift","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/04.rxswift"},"doc://JunnosBlog/documentation/JunnosBlog/32.Regex01":{"role":"article","title":"🍎 Swift - Regex.01","abstract":[{"type":"text","text":"아는 사람들은 잘 써먹는 그것."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/32.Regex01","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/32.regex01"},"doc://JunnosBlog/documentation/JunnosBlog/05.MVVM_CleanArchitecture01":{"role":"article","title":"🍎 Swift - MVVM, Clean Architecture.01","abstract":[{"type":"text","text":"iOS 개발자라면 꼭 알아야 할 아키텍처"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/05.MVVM_CleanArchitecture01","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/05.mvvm_cleanarchitecture01"},"doc://JunnosBlog/documentation/JunnosBlog/15.PHPicker":{"role":"article","title":"🍎 Swift - PHPicker","abstract":[{"type":"text","text":"안전하고 간편한 새로운 Photo Picker!"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/15.PHPicker","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/15.phpicker"},"doc://JunnosBlog/documentation/JunnosBlog/14.ReactorKit":{"role":"article","title":"🍎 Swift - ReactorKit","abstract":[{"type":"text","text":"협업을 위한 ViewModel 솔루션: ReactorKit"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/14.ReactorKit","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/14.reactorkit"},"doc://JunnosBlog/documentation/JunnosBlog/12.ScrollViewUsingAutoLayout":{"role":"article","title":"🍎 Swift - ScrollView 오토 레이아웃으로 구현하기","abstract":[{"type":"text","text":"ScrollView 오토레이아웃을 StoryBoard에서 잡아보자!"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/12.ScrollViewUsingAutoLayout","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/12.scrollviewusingautolayout"},"doc://JunnosBlog/documentation/JunnosBlog/SwiftCategory":{"images":[{"type":"card","identifier":"Swift.png"}],"role":"collectionGroup","title":"Swift","abstract":[{"type":"text","text":"This is Swift."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/SwiftCategory","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/swiftcategory"},"https://developer.apple.com/documentation/uikit/uiviewcontroller":{"title":"Apple Developers - UIViewController","titleInlineContent":[{"type":"text","text":"Apple Developers - UIViewController"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/uikit\/uiviewcontroller","url":"https:\/\/developer.apple.com\/documentation\/uikit\/uiviewcontroller"}}}