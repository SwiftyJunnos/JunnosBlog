{"primaryContentSections":[{"kind":"content","content":[{"anchor":"","level":2,"type":"heading","text":""},{"type":"paragraph","inlineContent":[{"type":"text","text":"이번에는 "},{"type":"codeVoice","code":"@autoclosure"},{"type":"text","text":"와 "},{"type":"codeVoice","code":"@escaping"},{"type":"text","text":"에 대해 알아보겠습니다."}]},{"anchor":"autoclosure","level":2,"type":"heading","text":"@autoclosure"},{"type":"paragraph","inlineContent":[{"type":"text","text":"autoclosure도 우선 용어 자체를 살펴보겠습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"자동-클로저?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이게 대체 뭘까요?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이번에는 정의를 살펴봅시다."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"인자로서 전달된 일반구문\/함수를 클로저로서 감싸는 것"}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"아무래도 일반구문\/함수를 자동으로 클로저로서 취급한다.. 라는 의미인 것 같네요."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"아직도 이해가 잘 가지 않으니 예제를 살펴보겠습니다."}]},{"type":"codeListing","syntax":"swift","code":["func foo(closure: @autoclosure () -> ()) {","  \/\/ Tasks","}"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"@autoclosure"},{"type":"text","text":"가 사용되는 위치도 잘 기억해주세요. 인자명 뒤 타입 정의 바로 앞에 위치해있습니다!"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"자 그래서 대체 이게 무슨말이냐.."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"@autoclosure"}]},{"type":"text","text":" 를 사용하면 클로저 타입의 인자 "},{"type":"strong","inlineContent":[{"type":"text","text":"closure"}]},{"type":"text","text":"는 클로저가 아닌 일반구문\/함수를 받아도 "},{"type":"strong","inlineContent":[{"type":"text","text":"클로저로서 처리"}]},{"type":"text","text":"해줍니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"우선 @autoclosure를 사용하지 않았을 때를 봅시다."}]},{"type":"codeListing","syntax":"swift","code":["func foo(_ closure: () -> Void) {","  closure()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"위 함수를 호출할 때 어떻게 호출할까요? 아래와 같이 호출합니다."}]},{"type":"codeListing","syntax":"swift","code":["foo({ ","  print(\"Hi! I'm Closure\")","})"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이번엔 같은 함수에 @autoclosure를 사용해봅시다."}]},{"type":"codeListing","syntax":"swift","code":["func foo(_ closure: @autoclosure () -> Void) {","  closure()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"위 함수는 아래처럼 호출됩니다."}]},{"type":"codeListing","syntax":"swift","code":["foo(print(\"Hi! I'm Closure\"))"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"{ … }"},{"type":"text","text":" 이 중괄호가 없어진 것을 볼 수 있죠."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"클로저는 본인이 클로저임을 알리기 위해 중괄호가 무조건 필요합니다. @autoclosure는 클로저가 아닌 일반구문\/함수를 중괄호로 감싼 역할을 해주는 것이죠."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"단 유의할 점은 @autoclosure를 사용하기 위해서는 클로저의 인자가 없어야 합니다!"}]},{"type":"codeListing","syntax":"swift","code":["func foo(closure: @autoclosure (Int) -> Void) {","  closure()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"위와 경우 "},{"type":"codeVoice","code":"(Int) -> Void"},{"type":"text","text":" 인자로 Int 타입이 들어가있죠?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"따라서 오류가 납니다. 꼭 주의해주세요!"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"그렇다면 일반구문에 비해서 @autoclosure을 사용했을 때의 차이점은 무엇일까요?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"일반구문은 원래 실행 순서가 되면 "},{"type":"strong","inlineContent":[{"type":"text","text":"즉시 실행"}]},{"type":"text","text":"됩니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"지연을 준다고 하더라도 지연을 주는 함수가 즉시 실행되었기 때문에 뒤에 따라오는 다른 함수들이 지연되는 것이죠."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"그런데 클로저는 즉시 실행되지 않습니다. 함수 안에서 "},{"type":"strong","inlineContent":[{"type":"text","text":"해당 인자가 사용될 때 실행"}]},{"type":"text","text":"되죠."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"결론적으로 @escaping은 일반구문을 클로저처럼 사용하고 싶을 때 유용한 기능입니다."}]},{"anchor":"escaping","level":2,"type":"heading","text":"@escaping"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"@escaping"},{"type":"text","text":" 클로저란 용어의 이름에서 유추할 수 있듯이, 함수에서 벗어나서도 실행될 수 있는 클로저입니다."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"@escaping"},{"type":"text","text":" 클로저를 사용하면 다음과 같은 기능을 사용할 수 있습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"함수가 끝난 뒤에도 실행될 수 있다."},{"type":"text","text":" "},{"type":"text","text":"중첩함수에서 중첩함수를 return 할 수 있다."},{"type":"text","text":" "},{"type":"text","text":"변수\/상수에 클로저를 대입할 수 있다."},{"type":"text","text":" "},{"type":"text","text":"이 말은 지금까지 다뤘던 클로저들은 위의 경우들이 전부 불가능하다는 소리겠죠?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"지금까지 다뤄온 클로저들 같이 @escaping 구문을 사용하지 않은 클로저들을 non-escaping closure라고 부릅니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"API 라이브러리인 Alamofire의 예시를 보겠습니다."}]},{"type":"codeListing","syntax":"swift","code":["func dataGET(from url: URL, completion: @escaping (AnyObject) -> ()) {","  DispatchQueue.global(qos: .background).async {","    Alamofire.request(url, method: .get).responseObject { (response: DataResponse<FilmResponse>) in ","    switch response.result {","    case .success(_):","      let res = response.result.value","      let resURL = res.results.imageID","      print(resURL ?? \"No URL Found\")","    case .failure(let error):","      print(error)","    }}","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"굉장히 복잡해보이죠? 사실 다른건 다 필요없습니다."}]},{"type":"codeListing","syntax":"swift","code":["func dateGET(from url: URL, completion: @escaping (AnyObject) -> ()) {","  DispatchQueue.global(qos: .background).async {","    \/\/ Blah Blah","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이렇게만 보면 됩니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이제 우리는 저 함수를 분석할 수 있습니다!"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"마지막 인자로 closure를 사용하여 "},{"type":"strong","inlineContent":[{"type":"text","text":"Trailing Closure"}]},{"type":"text","text":" 방식이 채택되었네요. 또, "},{"type":"codeVoice","code":"@escaping"},{"type":"text","text":" 클로저가 사용된 것도 볼 수 있습니다. 왜 사용했을까요?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"API 호출은 상대적으로 많은 시간이 소요됩니다. 그래서 보통 비동기성으로 실행하죠. 유저가 로딩이 다 될 때까지 먹통이 된 앱을 가만히 보고 있진 않을테니까요."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"따라서 위 함수가 완료되기 전에 "},{"type":"codeVoice","code":"DispatchQueue"},{"type":"text","text":"로 실행한 구문들은 완료되었을 가능성이 거의 전무합니다. 여기서 @escaping 클로저가 아니라 non-escaping 클로저를 사용했다면..? "},{"type":"strong","inlineContent":[{"type":"text","text":"함수가 종료됨과 동시에 함수 안에서 실행된 클로저까지 전부 종료되어 버립니다."}]},{"type":"text","text":" 저희가 원하는 결과는 절대 아니죠."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"그리고 애초에 XCode에서 이를 허용하지 않습니다."}]},{"style":"warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Escaping closure captures non-escaping parameter"}]}],"type":"aside","name":"Warning"},{"type":"paragraph","inlineContent":[{"type":"text","text":"라는 에러 메시지를 출력하며 빌드 에러가 나죠."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이렇게 "},{"type":"codeVoice","code":"@autoclosure"},{"type":"text","text":"와 "},{"type":"codeVoice","code":"@escaping"},{"type":"text","text":" 클로저까지 알아봤습니다. @escaping 클로저는 온라인으로 통신하는 앱에서는 거의 필수적으로 사용법을 알아둬야 하니 꼼꼼하게 기억해둘 필요가 있습니다. 저처럼 헤매지 않으려면 말이죠 ㅜㅜ"}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/junnosblog\/03.closure03"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/03.Closure03","interfaceLanguage":"swift"},"abstract":[{"type":"codeVoice","code":"@escaping"},{"type":"text","text":" 클로저에 대해 알아봅시다."}],"kind":"article","metadata":{"roleHeading":"Article","title":"🍎 Swift - 클로저(Closure).03","role":"article","modules":[{"name":"아요에스위프트"}]},"hierarchy":{"paths":[["doc:\/\/JunnosBlog\/documentation\/JunnosBlog","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/SwiftCategory"]]},"seeAlsoSections":[{"title":"Posts","identifiers":["doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/32.Regex01","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/10.ViewControllerLifeCycle","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/09.StructClass","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/08.ARC","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/07.Coordinator","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/06.MVVM_CleanArchitecture02","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/05.MVVM_CleanArchitecture01","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/04.RxSwift","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/02.Closure02","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/01.Closure01"],"generated":true}],"references":{"doc://JunnosBlog/documentation/JunnosBlog/08.ARC":{"role":"article","title":"🍎 Swift - ARC(strong, weak, unowned)","abstract":[{"type":"text","text":"쎈 애랑 약한 애랑 없는 애"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/08.ARC","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/08.arc"},"doc://JunnosBlog/documentation/JunnosBlog/02.Closure02":{"role":"article","title":"🍎 Swift - 클로저(Closure).02","abstract":[{"type":"text","text":"Trailing 클로저에 대해 알아봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/02.Closure02","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/02.closure02"},"doc://JunnosBlog/documentation/JunnosBlog/04.RxSwift":{"role":"article","title":"🍎 Swift - RxSwift","abstract":[{"type":"text","text":"Reactive한 Swift의 시작"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/04.RxSwift","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/04.rxswift"},"doc://JunnosBlog/documentation/JunnosBlog/01.Closure01":{"role":"article","title":"🍎 Swift - 클로저(Closure).01","abstract":[{"type":"text","text":"팔방미인 클로저에 대해 알아봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/01.Closure01","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/01.closure01"},"doc://JunnosBlog/documentation/JunnosBlog/32.Regex01":{"role":"article","title":"🍎 Swift - Regex.01","abstract":[{"type":"text","text":"아는 사람들은 잘 써먹는 그것."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/32.Regex01","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/32.regex01"},"Swift.png":{"alt":"Swift","type":"image","identifier":"Swift.png","variants":[{"url":"\/images\/Swift.png","traits":["1x","light"]}]},"doc://JunnosBlog/documentation/JunnosBlog/06.MVVM_CleanArchitecture02":{"role":"article","title":"🍎 Swift - MVVM, Clean Architecture.02","abstract":[{"type":"text","text":"두 아키텍처를 결합해봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/06.MVVM_CleanArchitecture02","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/06.mvvm_cleanarchitecture02"},"doc://JunnosBlog/documentation/JunnosBlog/07.Coordinator":{"role":"article","title":"🍎 Swift - Coordinator 패턴","abstract":[{"type":"text","text":"Navigation 해결사 등장"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/07.Coordinator","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/07.coordinator"},"doc://JunnosBlog/documentation/JunnosBlog/SwiftCategory":{"images":[{"type":"card","identifier":"Swift.png"}],"role":"collectionGroup","title":"Swift","abstract":[{"type":"text","text":"This is Swift."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/SwiftCategory","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/swiftcategory"},"doc://JunnosBlog/documentation/JunnosBlog/09.StructClass":{"role":"article","title":"🍎 Swift - Struct vs Class","abstract":[{"type":"text","text":"구조체와 클래스"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/09.StructClass","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/09.structclass"},"doc://JunnosBlog/documentation/JunnosBlog":{"role":"collection","title":"아요에스위프트","abstract":[],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog","kind":"symbol","type":"topic","url":"\/documentation\/junnosblog"},"doc://JunnosBlog/documentation/JunnosBlog/10.ViewControllerLifeCycle":{"role":"article","title":"🍎 Swift - View Controller의 Life Cycle","abstract":[{"type":"text","text":"View Controller의 삶과 죽음"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/10.ViewControllerLifeCycle","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/10.viewcontrollerlifecycle"},"doc://JunnosBlog/documentation/JunnosBlog/05.MVVM_CleanArchitecture01":{"role":"article","title":"🍎 Swift - MVVM, Clean Architecture.01","abstract":[{"type":"text","text":"iOS 개발자라면 꼭 알아야 할 아키텍처"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/05.MVVM_CleanArchitecture01","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/05.mvvm_cleanarchitecture01"}}}