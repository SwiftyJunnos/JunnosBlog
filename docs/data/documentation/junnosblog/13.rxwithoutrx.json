{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Rx-없이-View-➡️-ViewModel-Binding하기","level":2,"type":"heading","text":"Rx 없이 View ➡️ ViewModel Binding하기"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Rx라는 놈 공부할 땐 어려웠는데.."},{"type":"text","text":" "},{"type":"text","text":"한 번 써보니까 없이 기능 구현을 할 때 갈증이 계속해서 일어나는 현상을 겪고 있습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"하지만 라이브러리에 의존하는 것은 좋지 않으니까 Rx 없이 데이터 바인딩을 하는 방법을 공부해보았습니다."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"코드의 경우 검색해본 거의 모든 게시물에서 동일한 형태로 사용되고 있었습니다. 내부적인 동작 과정도 모른채로 가져다쓰긴 싫어서 공부 겸 작성한 게시물입니다!"}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"체크 리스트 앱을 만든다고 가정합시다."},{"type":"text","text":" "},{"type":"text","text":"할 일을 완료할 때마다 그 날 일의 완료율 Label을 계속해서 바꿔주고 싶어요."},{"type":"text","text":" "},{"type":"text","text":"딱 Rx를 사용하면 편리한 상황이지만 다른 기능을 찾아봅시다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"값이 바뀔 때마다 수행하는 동작.."},{"type":"text","text":" "},{"type":"text","text":"정확히 해당 기능을 하는 친구가 있었던 것 같아요."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"바로 "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":"입니다."}]},{"anchor":"didSet","level":2,"type":"heading","text":"didSet"},{"type":"codeListing","syntax":"swift","code":["var donePercentage: Int = 0 {","  didSet {","    print(oldValue)","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"donePercentage"},{"type":"text","text":"의 값이 바뀔 때마다 "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":"에 있는 "},{"type":"codeVoice","code":"print"},{"type":"text","text":" 함수가 자동으로 호출됩니다."},{"type":"text","text":" "},{"type":"text","text":"이 "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":"을 키워드로 잡고 시작해보겠습니다."}]},{"anchor":"Observable","level":2,"type":"heading","text":"Observable"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Rx에서 우리는"}]},{"type":"codeListing","syntax":"swift","code":["viewModel.todos","  .subscribe(onNext: { todo in","    print(todo.count)","  })","  .disposed(by: self.disposeBag)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이런 식으로 "},{"type":"codeVoice","code":"Observable"},{"type":"text","text":"한 데이터를 만들어주고 "},{"type":"codeVoice","code":"subscribe"},{"type":"text","text":"하여 필요한 동작들을 처리해주었습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"먼저 필요한 "},{"type":"codeVoice","code":"Observable"},{"type":"text","text":" 타입을 차근차근 만들어봅시다."}]},{"anchor":"value-T","level":2,"type":"heading","text":"value: T"},{"type":"codeListing","syntax":"swift","code":["class Observable<T> {","  var value: T","","  init(_ value: T) {","    self.value = value","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Observable"},{"type":"text","text":"은 모든 타입에 대해서 관찰이 가능해야하기 때문에 "},{"type":"codeVoice","code":"Generic"},{"type":"text","text":" 타입을 "},{"type":"codeVoice","code":"T"},{"type":"text","text":"라는 이름으로 사용해주었습니다."},{"type":"text","text":" "},{"type":"text","text":"그리고 생성자를 통해 알맹이인 "},{"type":"codeVoice","code":"value"},{"type":"text","text":" 값을 넣어주었죠."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이 "},{"type":"codeVoice","code":"value"},{"type":"text","text":" 값이 바뀔 때마다 어떤 함수를 실행해주어야 하기 때문에 "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":"을 사용해줍시다."}]},{"type":"codeListing","syntax":"swift","code":["var value: T {","  didSet {","    \/\/ 실행할 함수","  }","}"]},{"anchor":"listener-클로저","level":2,"type":"heading","text":"listener (클로저)"},{"type":"paragraph","inlineContent":[{"type":"text","text":"다시 Rx의 경우를 봐볼까요?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"저 "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" 안에 들어가게 될 함수를 찾아봅시다."}]},{"type":"codeListing","syntax":"swift","code":[".subscribe(onNext: { todo in","  print(todo)","})"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"subscribe"},{"type":"text","text":"라는 함수를 호출하고 클로저의 형태로 함수를 전달받아 실행하는 것 같네요."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"그렇다면 안에 들어갈 함수를 담을 클로저 변수를 정의해줍시다."}]},{"type":"codeListing","syntax":"swift","code":["var listener: ((T) -> Void)?"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"return"},{"type":"text","text":" 받는 값은 없으니 "},{"type":"codeVoice","code":"Void"},{"type":"text","text":"로 주고 "},{"type":"codeVoice","code":"value"},{"type":"text","text":" 값을 받아 처리해주어야 하니 "},{"type":"codeVoice","code":"input"},{"type":"text","text":" 파라미터로 "},{"type":"codeVoice","code":"T"},{"type":"text","text":"(제너릭 타입)을 받아줍시다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이제 이 "},{"type":"codeVoice","code":"listener"},{"type":"text","text":" 클로저를 "},{"type":"codeVoice","code":"Observable"},{"type":"text","text":" 코드에 적용시켜줍시다."}]},{"type":"codeListing","syntax":"swift","code":["class Observable<T> {","  var value: T {","    didSet {","      self.listener?(value)","    }","  }","","  var listener: ((T) -> Void)?","","  init(_ value: T) {","    self.value = value","  }","}"]},{"anchor":"subscribe","level":2,"type":"heading","text":"subscribe"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"View"},{"type":"text","text":"쪽에서 "},{"type":"codeVoice","code":"subscribe"},{"type":"text","text":" 안에서 클로저로 받는 함수를 "},{"type":"codeVoice","code":"listener"},{"type":"text","text":"에 담고 있다가 "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":"이 호출되면 실행되야합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"따라서 파라미터로 "},{"type":"codeVoice","code":"@escaping"},{"type":"text","text":" 클로저를 받아주고 클래스 내부의 "},{"type":"codeVoice","code":"listener"},{"type":"text","text":"에 담아줍시다."}]},{"type":"codeListing","syntax":"swift","code":["func subscribe(listener: @escaping (T) -> Void) {","  listener(value)","  self.listener = listener","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이 때 "},{"type":"codeVoice","code":"listener(value)"},{"type":"text","text":"와 같이 한 번 실행해줬기 때문에, "},{"type":"codeVoice","code":"subscribe"},{"type":"text","text":"와 동시에 무조건 한 번은 실행됩니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"binding과 동시에 실행을 하지 않고 싶은 경우에는 빼주어도 아무 문제 없습니다."}]},{"anchor":"종합","level":2,"type":"heading","text":"종합"},{"type":"paragraph","inlineContent":[{"type":"text","text":"이제 코드들을 합쳐봅시다!"}]},{"type":"codeListing","syntax":"swift","code":["class Observable<T> {","  var value: T {","    didSet {","      self.listener?(value)","    }","  }","","  var listener: ((T) -> Void)?","","  init(_ value: T) {","    self.value = value","  }","","  func subscribe(listener: @escaping (T) -> Void) {","    listener(value)","    self.listener = listener","  }","}"]},{"anchor":"사용","level":2,"type":"heading","text":"사용"},{"type":"codeListing","syntax":"swift","code":["class HomeViewModel {","  var todoData: Observable<[ToDo]> = Observable([])","}","","class HomeViewController: UIViewController {","  private var viewModel = HomeViewModel()","","  lazy var progressLabel = UILabel().then { ... }","","  override func viewDidLoad() {","    self.viewDidLoad()","    self.viewModel.todoData.subscribe { todo in","      DispatchQueue.main.async {","        self.progressLabel.text = todo.count","      }","    }","","    DispatchQueue.main.asyncAfter(deadline: .now() + 1) {","      self.viewModel.todoData.value = [","        ToDo(title: \"Test\", state: .completed)","      ]","    }","  }","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/junnosblog\/13.rxwithoutrx"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/13.RxWithoutRx","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Rx없이 Rx와 같은 기능을 구현해볼까요?"}],"kind":"article","metadata":{"roleHeading":"Article","title":"🍎 Swift - Rx 없이 Reactive Binding 해보기","role":"article","modules":[{"name":"아요에스위프트"}]},"hierarchy":{"paths":[["doc:\/\/JunnosBlog\/documentation\/JunnosBlog","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/SwiftCategory"]]},"seeAlsoSections":[{"title":"Posts","identifiers":["doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/32.Regex01","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/17.DownSampling","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/16.PropertyWrapper","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/15.PHPicker","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/14.ReactorKit","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/12.ScrollViewUsingAutoLayout","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/11.Bounds&Frame","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/10.ViewControllerLifeCycle","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/09.StructClass","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/08.ARC","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/07.Coordinator","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/06.MVVM_CleanArchitecture02","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/05.MVVM_CleanArchitecture01","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/04.RxSwift","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/03.Closure03","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/02.Closure02","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/01.Closure01"],"generated":true}],"references":{"doc://JunnosBlog/documentation/JunnosBlog/32.Regex01":{"role":"article","title":"🍎 Swift - Regex.01","abstract":[{"type":"text","text":"아는 사람들은 잘 써먹는 그것."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/32.Regex01","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/32.regex01"},"doc://JunnosBlog/documentation/JunnosBlog/14.ReactorKit":{"role":"article","title":"🍎 Swift - ReactorKit","abstract":[{"type":"text","text":"협업을 위한 ViewModel 솔루션: ReactorKit"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/14.ReactorKit","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/14.reactorkit"},"doc://JunnosBlog/documentation/JunnosBlog/17.DownSampling":{"role":"article","title":"🍎 Swift - 다운샘플링","abstract":[{"type":"text","text":"모바일 환경에서 고해상도 이미지는 쓸 모 없 다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/17.DownSampling","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/17.downsampling"},"doc://JunnosBlog/documentation/JunnosBlog/07.Coordinator":{"role":"article","title":"🍎 Swift - Coordinator 패턴","abstract":[{"type":"text","text":"Navigation 해결사 등장"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/07.Coordinator","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/07.coordinator"},"doc://JunnosBlog/documentation/JunnosBlog/08.ARC":{"role":"article","title":"🍎 Swift - ARC(strong, weak, unowned)","abstract":[{"type":"text","text":"쎈 애랑 약한 애랑 없는 애"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/08.ARC","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/08.arc"},"doc://JunnosBlog/documentation/JunnosBlog/05.MVVM_CleanArchitecture01":{"role":"article","title":"🍎 Swift - MVVM, Clean Architecture.01","abstract":[{"type":"text","text":"iOS 개발자라면 꼭 알아야 할 아키텍처"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/05.MVVM_CleanArchitecture01","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/05.mvvm_cleanarchitecture01"},"doc://JunnosBlog/documentation/JunnosBlog/11.Bounds&Frame":{"role":"article","title":"🍎 Swift - Bounds vs Frame","abstract":[{"type":"text","text":"View의 크기와 몸집"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/11.Bounds&Frame","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/11.bounds&frame"},"doc://JunnosBlog/documentation/JunnosBlog/01.Closure01":{"role":"article","title":"🍎 Swift - 클로저(Closure).01","abstract":[{"type":"text","text":"팔방미인 클로저에 대해 알아봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/01.Closure01","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/01.closure01"},"doc://JunnosBlog/documentation/JunnosBlog/10.ViewControllerLifeCycle":{"role":"article","title":"🍎 Swift - View Controller의 Life Cycle","abstract":[{"type":"text","text":"View Controller의 삶과 죽음"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/10.ViewControllerLifeCycle","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/10.viewcontrollerlifecycle"},"doc://JunnosBlog/documentation/JunnosBlog/09.StructClass":{"role":"article","title":"🍎 Swift - Struct vs Class","abstract":[{"type":"text","text":"구조체와 클래스"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/09.StructClass","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/09.structclass"},"doc://JunnosBlog/documentation/JunnosBlog/16.PropertyWrapper":{"role":"article","title":"🍎 Swift - Property Wrapper","abstract":[{"type":"text","text":"안전하고 간편한 새로운 Photo Picker!"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/16.PropertyWrapper","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/16.propertywrapper"},"doc://JunnosBlog/documentation/JunnosBlog":{"role":"collection","title":"아요에스위프트","abstract":[],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog","kind":"symbol","type":"topic","url":"\/documentation\/junnosblog"},"doc://JunnosBlog/documentation/JunnosBlog/15.PHPicker":{"role":"article","title":"🍎 Swift - PHPicker","abstract":[{"type":"text","text":"안전하고 간편한 새로운 Photo Picker!"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/15.PHPicker","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/15.phpicker"},"doc://JunnosBlog/documentation/JunnosBlog/12.ScrollViewUsingAutoLayout":{"role":"article","title":"🍎 Swift - ScrollView 오토 레이아웃으로 구현하기","abstract":[{"type":"text","text":"ScrollView 오토레이아웃을 StoryBoard에서 잡아보자!"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/12.ScrollViewUsingAutoLayout","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/12.scrollviewusingautolayout"},"doc://JunnosBlog/documentation/JunnosBlog/SwiftCategory":{"images":[{"type":"card","identifier":"Swift.png"}],"role":"collectionGroup","title":"Swift","abstract":[{"type":"text","text":"This is Swift."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/SwiftCategory","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/swiftcategory"},"doc://JunnosBlog/documentation/JunnosBlog/04.RxSwift":{"role":"article","title":"🍎 Swift - RxSwift","abstract":[{"type":"text","text":"Reactive한 Swift의 시작"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/04.RxSwift","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/04.rxswift"},"doc://JunnosBlog/documentation/JunnosBlog/02.Closure02":{"role":"article","title":"🍎 Swift - 클로저(Closure).02","abstract":[{"type":"text","text":"Trailing 클로저에 대해 알아봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/02.Closure02","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/02.closure02"},"doc://JunnosBlog/documentation/JunnosBlog/06.MVVM_CleanArchitecture02":{"role":"article","title":"🍎 Swift - MVVM, Clean Architecture.02","abstract":[{"type":"text","text":"두 아키텍처를 결합해봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/06.MVVM_CleanArchitecture02","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/06.mvvm_cleanarchitecture02"},"doc://JunnosBlog/documentation/JunnosBlog/03.Closure03":{"role":"article","title":"🍎 Swift - 클로저(Closure).03","abstract":[{"type":"codeVoice","code":"@escaping"},{"type":"text","text":" 클로저에 대해 알아봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/03.Closure03","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/03.closure03"},"Swift.png":{"alt":"Swift","type":"image","identifier":"Swift.png","variants":[{"url":"\/images\/Swift.png","traits":["1x","light"]}]}}}