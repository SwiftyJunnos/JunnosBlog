{"primaryContentSections":[{"kind":"content","content":[{"anchor":"","level":2,"type":"heading","text":""},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift 문서에는 오랜만이네요. 최근 파이썬만 다루다보니 Swift 쪽 밀린 공부가 산더미에요."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"오늘은 ARC에 대해 알아볼겁니다. 이야기는 계속 들어왔고 참고하는 코드들에서도 매우 자주 보였는데 이번에 제대로 알아보고 가봐야겠습니다."}]},{"anchor":"ARC-Automatic-Reference-Counting","level":2,"type":"heading","text":"ARC (Automatic Reference Counting)"},{"type":"paragraph","inlineContent":[{"type":"text","text":"이름에서 알 수 있듯이 ARC는 참조와 관련된 기능입니다. 그리고 보기만해도 기분이 좋아지는 Automatic한 기능입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"한 마디로 쉽게 넘기면 ARC는"}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"자동으로 메모리를 관리해주는 아주 간편한 기능입니다."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"여기서 조금 더 들어가면 ARC는,"}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"컴파일 타임에 자동으로 "},{"type":"codeVoice","code":"retain"},{"type":"text","text":", "},{"type":"codeVoice","code":"release"},{"type":"text","text":" 코드를 생성해주는 기능입니다. retain한 횟수를 추적하며 더 이상 참조되지 않는 인스턴스를 release해주는 것 이라고 설명할 수 있습니다."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"모든 기기의 메모리(Heap) 영역은 유한된 자원입니다. 따라서 언제나 최적화가 필요하고, 가볍게 유지할 필요가 있죠!"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift가 공개되기 이전 Obj-C 언어로 iOS 앱을 개발했던 시절에는 이 메모리 관리를 개발자가 직접 수동으로 해주어야 했다고 합니다. 이때의 메모리 관리 방식을 MRC(Manual Reference Counting)이라고 부릅니다."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"retain"},{"type":"text","text":": "},{"type":"strong","inlineContent":[{"type":"text","text":"reference count"}]},{"type":"text","text":"를 증가시켜 객체가 유지되도록 보장"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"release"},{"type":"text","text":": "},{"type":"strong","inlineContent":[{"type":"text","text":"reference count"}]},{"type":"text","text":"를 감소시켜 더 이상 사용되지 않는 객체가 메모리에 유지되는 것을 방지"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이 두 기능을 계속해서 반복해서 사용하며 메모리를 관리해주어야 했던 것이죠. 정말이지 너무 번거롭지 않나요..? 그래서 애플은 개발자들의 편의성을 위해 ARC를 등장시키게 된 것 입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"ARC는 컴파일 타임에 수행됩니다. 그런데 수행되는 방식이 각각의 코드 중간중간에 자동으로 "},{"type":"codeVoice","code":"retain"},{"type":"text","text":" 코드와 "},{"type":"codeVoice","code":"release"},{"type":"text","text":" 코드를 삽입시키는 방식입니다."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"retainrelease"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"컴파일 타임에는 단순히 코드를 삽입만 해주고, 런타임동안 코드가 실행되며 "},{"type":"strong","inlineContent":[{"type":"text","text":"reference count"}]},{"type":"text","text":"를 증감시킵니다. 그러다가 count 값이 0이 되면 "},{"type":"codeVoice","code":"deinit"},{"type":"text","text":"을 통해 메모리에서 해제시키는 것이죠!"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"자 그런데, 자동으로 관리를 해주는 것이 아무리 편하더라도 개발자가 어느정도 메모리에 관여를 하고 싶을 때가 있겠죠? 그런 경우를 위해서 "},{"type":"codeVoice","code":"strong"},{"type":"text","text":", "},{"type":"codeVoice","code":"weak"},{"type":"text","text":", "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":"가 존재하는 것 입니다."}]},{"anchor":"strong-강한-참조","level":3,"type":"heading","text":"strong (강한 참조)"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"선언할 때 아무 키워드도 적어주지 않으면 기본값(default)으로 설정"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"해당 인스턴스의 소유권을 가짐"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"참조하는 인스턴스의 "},{"type":"strong","inlineContent":[{"type":"text","text":"reference count"}]},{"type":"text","text":" 증가"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"strong reference count"}]},{"type":"text","text":"가 0이 되면 객체는 "},{"type":"codeVoice","code":"deinit"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"값 지정 시점에 "},{"type":"codeVoice","code":"retain"},{"type":"text","text":", 참조 종료 시점에 "},{"type":"codeVoice","code":"release"}]}]}]},{"type":"codeListing","syntax":"swift","code":["var david: Person? = Person(name: \"David\")","\/\/ reference count ++","","david = nil \/\/ reference count --"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"강한 참조를 사용할 때는 주의할 점이 하나 있습니다. 바로 "},{"type":"strong","inlineContent":[{"type":"text","text":"강한 참조 순환(Strong Reference Cycle)"}]},{"type":"text","text":" 입니다."}]},{"type":"codeListing","syntax":"swift","code":["class Strong {","  var strong: Strong? = nil","}","","var strong1: Strong? = Strong()","var strong2: Strong? = Strong()","","strong1?.strong = strong2","strong2?.strong = strong1","","strong1 = nil","strong2 = nil"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"위 예시를 보면 "},{"type":"codeVoice","code":"strong1"},{"type":"text","text":"과 "},{"type":"codeVoice","code":"strong2"},{"type":"text","text":"는 서로의 strong을 참조하고 있습니다. 이 때, strong은 강한 참조 객체라서 "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"을 주기 전까진 해제되지 못합니다."},{"type":"text","text":" "},{"type":"text","text":"그런데 마지막 "},{"type":"codeVoice","code":"strong1"},{"type":"text","text":"과 "},{"type":"codeVoice","code":"strong2"},{"type":"text","text":"에 "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" 값을 주려 할 때, 서로가 서로를 강하게 참조하고 있어 각각의 객체 변수는 메모리 해제가 되었지만, 객체 자체는 여전히 서로를 참조하며 메모리 해제가 되지 못합니다."},{"type":"text","text":" "},{"type":"text","text":"이렇게 되면 객체 변수는 이미 해제가 되어 객체에 접근할 방법도 없고, 객체를 메모리에서 해제할 방법도 없어지게 됩니다."},{"type":"text","text":" "},{"type":"text","text":"영원히 메모리에 머물러 메모리 누수가 발생하게 되는 것이죠."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이런 현상을 해결하기 위해 "},{"type":"codeVoice","code":"weak"},{"type":"text","text":" (약한 참조)가 필요합니다."}]},{"anchor":"weak-약한-참조","level":3,"type":"heading","text":"weak (약한 참조)"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"해당 인스턴스의 소유권을 가지지 않음"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"주소값만 가짐으로서 포인터처럼 사용"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"reference count"}]},{"type":"text","text":"를 증가시키지 않음"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"weak reference count"}]},{"type":"text","text":"가 0이 되면 "},{"type":"codeVoice","code":"dead"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"메모리 해제될 때 자동으로 "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"로 초기화"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"해당 인스턴스가 "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" 일 수 있기 때문에 항상 "},{"type":"codeVoice","code":"optional"},{"type":"text","text":"이어야 함"}]}]}]},{"type":"codeListing","syntax":"swift","code":["weak var david: Person? = Person(named: \"David\")","\/\/ 바로 객체 해제, nil"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"그렇다면 "},{"type":"codeVoice","code":"weak"},{"type":"text","text":"는 어떻게 참조 순환을 해결할까요?"}]},{"type":"codeListing","syntax":"swift","code":["class Strong {","  weak var strong: Strong? = nil","}","","var strong1: Strong? = Strong()","var strong2: Strong? = Strong()","","strong1?.strong = strong2","strong2?.strong = strong1","","strong1 = nil","strong2 = nil"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"위와 같은 예시이지만 각각의 객체 변수가 "},{"type":"codeVoice","code":"weak"},{"type":"text","text":"(약한 참조)이기 때문에 ARC가 메모리에서 해제될 때 자동으로 객체까지 메모리에서 해제시켜 줍니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"참조 순환 문제가 해결되었네요!"}]},{"anchor":"unowned-미소유-참조","level":3,"type":"heading","text":"unowned (미소유 참조)"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"해당 인스턴스의 소유권을 가지지 않음"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"unowned reference count"}]},{"type":"text","text":"가 0이 되면 "},{"type":"codeVoice","code":"free"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"해당 인스턴스를 "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"로 초기화하지 않음"}]}]}]},{"anchor":"그래서-셋의-차이는","level":3,"type":"heading","text":"그래서 셋의 차이는?"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"strong"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"메모리에서 해제되는 것을 막기 위해 사용"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Reference Count 1 증가"}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"weak"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"순환 참조의 가능성이 있을 경우 사용"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"항상 "},{"type":"codeVoice","code":"var"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Reference Count 변동 X"}]}]}]}]},{"content":[{"anchor":"unowned","level":2,"type":"heading","text":"`unowned`"}]}]},{"anchor":"사이드-테이블-Side-Table-Entry","level":2,"type":"heading","text":"사이드 테이블 (Side Table Entry)"},{"type":"paragraph","inlineContent":[{"type":"text","text":"설명의 순서는 강한 참조 순환 때문에 "},{"type":"codeVoice","code":"strong"},{"type":"text","text":" ➡️ "},{"type":"codeVoice","code":"weak"},{"type":"text","text":" ➡️ "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":"의 순서로 했지만 개념을 자세히 살펴보면 "},{"type":"codeVoice","code":"strong"},{"type":"text","text":" ➡️ "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":" ➡️ "},{"type":"codeVoice","code":"weak"},{"type":"text","text":"의 순서로 보는 것이 맞습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"강한 참조 변수와 미소유 참조 변수는 객체를 직접 참조하지만, 약한 참조 변수는 객체의 사이드 테이블을 참조하기 때문입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"내부적으로 객체가 생성되면 "},{"type":"codeVoice","code":"weak"},{"type":"text","text":", "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":", "},{"type":"codeVoice","code":"strong"},{"type":"text","text":"의 종류에 따라 따로 "},{"type":"strong","inlineContent":[{"type":"text","text":"reference count"}]},{"type":"text","text":"를 세는 것이 아니라 모든 종류의 "},{"type":"strong","inlineContent":[{"type":"text","text":"reference count"}]},{"type":"text","text":"를 전부 셉니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"순차적으로 살펴보면,"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"strong reference count"}]},{"type":"text","text":"가 0이 되면 객체는 "},{"type":"codeVoice","code":"deinit"},{"type":"text","text":" 되지만 메모리에는 남아 있습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이후 "},{"type":"strong","inlineContent":[{"type":"text","text":"unowned reference count"}]},{"type":"text","text":"를 체크하여 0이 아니라면 "},{"type":"codeVoice","code":"DEINITED"},{"type":"text","text":" 상태로 메모리에 쭈욱 남아있고, 0이라면 "},{"type":"codeVoice","code":"free"},{"type":"text","text":" 됩니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"그 이후에는 "},{"type":"strong","inlineContent":[{"type":"text","text":"weak reference count"}]},{"type":"text","text":"를 체크하여 0이 아니라면 "},{"type":"codeVoice","code":"FREED"},{"type":"text","text":" 상태가 되어 사이드 테이블이 메모리에 남아있고, 0이 되었을때야 모든 "},{"type":"strong","inlineContent":[{"type":"text","text":"reference count"}]},{"type":"text","text":"가 0이 되어 사이드 테이블이 메모리에서 해제되며 객체가 "},{"type":"codeVoice","code":"DEAD"},{"type":"text","text":" 상태가 됩니다."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"ARCStateMachine"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"위 State Machine 그래프로 한눈에 알아보기 쉽게 정리해볼 수 있습니다."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/junnosblog\/08.arc"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/08.ARC","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"쎈 애랑 약한 애랑 없는 애"}],"kind":"article","metadata":{"roleHeading":"Article","title":"🍎 Swift - ARC(strong, weak, unowned)","role":"article","modules":[{"name":"아요에스위프트"}]},"hierarchy":{"paths":[["doc:\/\/JunnosBlog\/documentation\/JunnosBlog","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/SwiftCategory"]]},"seeAlsoSections":[{"title":"Posts","identifiers":["doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/32.Regex01","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/10.ViewControllerLifeCycle","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/09.StructClass","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/07.Coordinator","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/06.MVVM_CleanArchitecture02","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/05.MVVM_CleanArchitecture01","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/04.RxSwift","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/03.Closure03","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/02.Closure02","doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/01.Closure01"],"generated":true}],"references":{"doc://JunnosBlog/documentation/JunnosBlog":{"role":"collection","title":"아요에스위프트","abstract":[],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog","kind":"symbol","type":"topic","url":"\/documentation\/junnosblog"},"doc://JunnosBlog/documentation/JunnosBlog/06.MVVM_CleanArchitecture02":{"role":"article","title":"🍎 Swift - MVVM, Clean Architecture.02","abstract":[{"type":"text","text":"두 아키텍처를 결합해봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/06.MVVM_CleanArchitecture02","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/06.mvvm_cleanarchitecture02"},"doc://JunnosBlog/documentation/JunnosBlog/10.ViewControllerLifeCycle":{"role":"article","title":"🍎 Swift - View Controller의 Life Cycle","abstract":[{"type":"text","text":"View Controller의 삶과 죽음"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/10.ViewControllerLifeCycle","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/10.viewcontrollerlifecycle"},"doc://JunnosBlog/documentation/JunnosBlog/05.MVVM_CleanArchitecture01":{"role":"article","title":"🍎 Swift - MVVM, Clean Architecture.01","abstract":[{"type":"text","text":"iOS 개발자라면 꼭 알아야 할 아키텍처"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/05.MVVM_CleanArchitecture01","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/05.mvvm_cleanarchitecture01"},"doc://JunnosBlog/documentation/JunnosBlog/07.Coordinator":{"role":"article","title":"🍎 Swift - Coordinator 패턴","abstract":[{"type":"text","text":"Navigation 해결사 등장"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/07.Coordinator","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/07.coordinator"},"doc://JunnosBlog/documentation/JunnosBlog/04.RxSwift":{"role":"article","title":"🍎 Swift - RxSwift","abstract":[{"type":"text","text":"Reactive한 Swift의 시작"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/04.RxSwift","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/04.rxswift"},"doc://JunnosBlog/documentation/JunnosBlog/09.StructClass":{"role":"article","title":"🍎 Swift - Struct vs Class","abstract":[{"type":"text","text":"구조체와 클래스"}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/09.StructClass","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/09.structclass"},"retainrelease":{"alt":"Retain & Release","type":"image","identifier":"retainrelease","variants":[{"url":"\/images\/retainrelease.png","traits":["1x","light"]}]},"doc://JunnosBlog/documentation/JunnosBlog/02.Closure02":{"role":"article","title":"🍎 Swift - 클로저(Closure).02","abstract":[{"type":"text","text":"Trailing 클로저에 대해 알아봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/02.Closure02","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/02.closure02"},"doc://JunnosBlog/documentation/JunnosBlog/SwiftCategory":{"images":[{"type":"card","identifier":"Swift.png"}],"role":"collectionGroup","title":"Swift","abstract":[{"type":"text","text":"This is Swift."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/SwiftCategory","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/swiftcategory"},"Swift.png":{"alt":"Swift","type":"image","identifier":"Swift.png","variants":[{"url":"\/images\/Swift.png","traits":["1x","light"]}]},"doc://JunnosBlog/documentation/JunnosBlog/01.Closure01":{"role":"article","title":"🍎 Swift - 클로저(Closure).01","abstract":[{"type":"text","text":"팔방미인 클로저에 대해 알아봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/01.Closure01","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/01.closure01"},"ARCStateMachine":{"alt":"ARC State Machine","type":"image","identifier":"ARCStateMachine","variants":[{"url":"\/images\/ARCStateMachine.png","traits":["1x","light"]}]},"doc://JunnosBlog/documentation/JunnosBlog/32.Regex01":{"role":"article","title":"🍎 Swift - Regex.01","abstract":[{"type":"text","text":"아는 사람들은 잘 써먹는 그것."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/32.Regex01","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/32.regex01"},"doc://JunnosBlog/documentation/JunnosBlog/03.Closure03":{"role":"article","title":"🍎 Swift - 클로저(Closure).03","abstract":[{"type":"codeVoice","code":"@escaping"},{"type":"text","text":" 클로저에 대해 알아봅시다."}],"identifier":"doc:\/\/JunnosBlog\/documentation\/JunnosBlog\/03.Closure03","kind":"article","type":"topic","url":"\/documentation\/junnosblog\/03.closure03"}}}